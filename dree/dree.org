#+begin_src latex
  \section{\ty{dree}} 
    The program \ty{dree} takes as input a taxon-ID and the name of the
    taxonomy database. It returns the subtree rooted on the focal
    taxon. The subtree is written in the dot language ready for
    rendering with \ty{dot}, which is part of the graphviz package. For
    example, we can draw the tree for the \emph{Homininae}, taxon-ID
    207598, which include human, chimp, and gorilla. By default,
    \ty{dree} labels taxa with their IDs, but with \ty{-n} we get names
    instead. Taxa with sequenced genomes are colored.
  \begin{verbatim}
  $ ./dree -n 207598 neidb | dot -T x11
  \end{verbatim}
  The resulting tree in Figure~\ref{fig:homininaeFull} is pretty
  crowded, so we use \ty{-g} to to reduce it to the taxa with sequenced
  genomes and their ancestors.
  \begin{verbatim}
  $ ./dree -n -g 207598 neidb | dot -T x11
  \end{verbatim}
  This gives the more
  legible Figure~\ref{fig:homininaeG}.
    \begin{figure}
      \begin{center}
	\resizebox{\textwidth}{!}{\includegraphics{../dree/homininae_full_n}}
      \end{center}
      \caption{Taxonomy of the \emph{Homininae}, taxa with sequenced
	genomes are colored.}\label{fig:homininaeFull}
    \end{figure}

    \begin{figure}
      \begin{center}
	\resizebox{\textwidth}{!}{\includegraphics{../dree/homininae_g_n}}
      \end{center}
      \caption{Taxonomy of the \emph{Homininae} reduced to taxa with
	sequenced genomes and their ancestors; taxa with genomes are
	colored.}\label{fig:homininaeG}
    \end{figure}

    \subsection*{Implementation}
    The outline of \ty{dree} has hooks for imports and the logic of the
    main function.  \bpr{dree}{pr:dr}
#+end_src
#+begin_src go <<dree.go>>=
  package main

  import (
	  //<<Imports, Pr.~\ref{pr:dr}>>
  )

  func main() {
	  //<<Main function, Pr.~\ref{pr:dr}>>
  }
#+end_src
#+begin_src latex
  \epr
  In the main function we set the usage, declare the options, and parse
  them. Then we get the subtree we're after, annotate it, and print it.
#+end_src
#+begin_src go <<Main function, Pr.~\ref{pr:dr}>>=
  //<<Set usage, Pr.~\ref{pr:dr}>>
  //<<Declare options, Pr.~\ref{pr:dr}>>
  //<<Parse options, Pr.~\ref{pr:dr}>>
  //<<Get subtree, Pr.~\ref{pr:dr}>>
  //<<Annotate subtree, Pr.~\ref{pr:dr}>>
  //<<Draw subtree, Pr.~\ref{pr:dr}>>
#+end_src
#+begin_src latex
  The usage consists of the actual usage message, an explanation of the
  purpose of \ty{dree}, and an example command.
#+end_src
#+begin_src go <<Set usage, Pr.~\ref{pr:dr}>>=
  u := "dree [-h] [option]... <taxon-ID> <db>"
  p := "Get the taxonomy rooted on a specific taxon."
  e := "dree -n -g 207598 neidb | dot -T x11"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:dr}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  Apart from the version, we declare two options, one to print the name
  instead of the default taxon-ID, \ty{-n}, the other to print only taxa
  with genome sequences, \ty{-g}.
#+end_src
#+begin_src go <<Declare options, Pr.~\ref{pr:dr}>>=
  optV := flag.Bool("v", false, "version")
  optN := flag.Bool("n", false,
	  "print names instead of taxon-IDs")
  optG := flag.Bool("g", false,
	  "only taxa with genome sequences")
  optL := flag.Bool("l", false, "list taxa")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:dr}>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the options and respond to \ty{-v}, as this stops
  \ty{dree}. Then we get the taxon-ID and the database name. Using the
  database name we open the database connection.
#+end_src
#+begin_src go <<Parse options, Pr.~\ref{pr:dr}>>=
  flag.Parse()
  if *optV {
	  util.PrintInfo("dree")
  }
  //<<Get taxon-ID, Pr.~\ref{pr:dr}>>
  //<<Get database name, Pr.~\ref{pr:dr}>>
  //<<Open database connection, Pr.~\ref{pr:dr}>>
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:dr}>>=
  "github.com/evolbioinf/neighbors/util"
#+end_src
#+begin_src latex
  The remaining tokens on the command line are interpreted as taxon-ID
  and database, in that order. If we don't have two tokens, we bail with
  a friendly message. We convert the taxonomy-ID to an integer.
#+end_src
#+begin_src go <<Get taxon-ID, Pr.~\ref{pr:dr}>>=
  tokens := flag.Args()
  if len(tokens) != 2 {
	  fmt.Fprintf(os.Stderr,
		  "please provide a taxon-ID and a database\n")
	  os.Exit(0)
  }
  tid, err := strconv.Atoi(tokens[0])
  if err != nil {
	  log.Fatalf("couldn't convert %q", tokens[0])
  }
#+end_src
#+begin_src latex
  We import \ty{fmt}, \ty{os}, \ty{strconv}, and \ty{log}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:dr}>>=
  "fmt"
  "os"
  "strconv"
  "log"
#+end_src
#+begin_src latex
  The database name is the second token.
#+end_src
#+begin_src go <<Get database name, Pr.~\ref{pr:dr}>>=
  dbname := tokens[1]
#+end_src
#+begin_src latex
  We open a connection to the taxonomy database.
#+end_src
#+begin_src go <<Open database connection, Pr.~\ref{pr:dr}>>=
  taxdb := tdb.OpenTaxonomyDB(dbname)
#+end_src
#+begin_src latex
  We import \ty{tdb}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:dr}>>=
  "github.com/evolbioinf/neighbors/tdb"
#+end_src
#+begin_src latex
  We get the subtree we're looking for.
#+end_src
#+begin_src go <<Get subtree, Pr.~\ref{pr:dr}>>=
  subtree := taxdb.Subtree(tid)
#+end_src
#+begin_src latex
  We annotate each node, $v$, of our subtree with two kinds of
  information: whether or not $v$ has at least one genome associated
  with it, and whether or not $v$ has at least one genome in the subtree
  rooted on it. So we construct two maps for storing this
  information. Then we mark nodes with genomes and nodes with genomes in
  subtree.
#+end_src
#+begin_src go <<Annotate subtree, Pr.~\ref{pr:dr}>>=
  hasGenome := make(map[int]bool)
  hasGsub := make(map[int]bool)
  //<<Mark nodes with genomes, Pr.~\ref{pr:dr}>>
  //<<Mark nodes with genomes in subtree, Pr.~\ref{pr:dr}>>
#+end_src
#+begin_export latex
We iterate over the nodes and mark those with genomes. These nodes are
also the initial set of nodes with genomes in their subtree.
#+end_export
#+begin_src go <<Mark nodes with genomes, Pr.~\ref{pr:dr}>>=
  for _, v := range subtree {
	  if len(taxdb.Accessions(v)) > 0 {
		  hasGenome[v] = true
		  hasGsub[v] = true
	  }
  }
#+end_src
#+begin_export latex
To find the nodes with genomes in their subtrees, we iterate over the
nodes and for each node with a genome in it subtree, we propagate this
up the tree.
#+end_export
#+begin_src go <<Mark nodes with genomes in subtree, Pr.~\ref{pr:dr}>>=
  for _, v := range subtree {
	  if hasGsub[v] {
		  u := v
		  p := taxdb.Parent(u)
		  for u != tid {
			  hasGsub[p] = true
			  u = p
			  p = taxdb.Parent(u)
		  }
	  }
  }
#+end_src
#+begin_export latex
By default we draw the subtree graph, but the user might also have
opted for listing the taxa in the subtree.
#+end_export
#+begin_src go <<Draw subtree, Pr.~\ref{pr:dr}>>=
  if *optL {
	  //<<List subtree, Pr.~\ref{pr:dr}>>
  } else {
	  //<<Draw subtree graph, Pr.~\ref{pr:dr}>>
  }
#+end_src
#+begin_export latex
We list the subtree in a table consisting of three mandatory columns,
taxon-ID, rank, and the number of genomes. In addition, the user might
have opted for names. We construct this table with a
\ty{tabwriter}. Then we iterate over the nodes and list each one. At
the end we flush the tabwriter.
#+end_export
#+begin_src go <<List subtree, Pr.~\ref{pr:dr}>>=
  w := tabwriter.NewWriter(os.Stdout, 0, 1, 2, ' ', 0)
  fmt.Fprint(w, "# Taxid\tRank\tGenomes")
  if *optN {
	  fmt.Fprint(w, "\tName")
  }
  fmt.Fprint(w, "\n")
  for _, v := range subtree {
	  //<<List one node, Pr.~\ref{pr:dr}>>
  }
  w.Flush()
#+end_src
#+begin_export latex
We import \ty{tabwriter}.
#+end_export
#+begin_src go <<Imports, Pr.~\ref{pr:dr}>>=
  "text/tabwriter"
#+end_src
#+begin_export latex
The user might have opted to list only taxon nodes with genomes and/or
to add names to taxa.
#+end_export
#+begin_src go <<List one node, Pr.~\ref{pr:dr}>>=
  n := len(taxdb.Accessions(v))
  if !*optG || n > 0 {
	  r := taxdb.Rank(v)
	  fmt.Fprintf(w, "%d\t%s\t%d", v, r, n)
	  if *optN {
		  a := taxdb.Name(v)
		  fmt.Fprintf(w, "\t%s", a)
	  }
	  fmt.Fprintf(w, "\n")
  }
#+end_src
#+begin_src latex
  The default node is simply its taxon ID. However, nodes can be
  annotated with color and a taxon name. For this purpose we declare
  templates for annotation lines, one for color, ``lightsalmon'', the
  other for the name.

  Then we draw the header and footer of the graph, and the actual
  subtree sandwiched in between. To improve legibility, that subtree is
  oriented left to right rather than the default top to bottom. For each
  node $v$ in the subtree we print $v$ and its parent.
#+end_src
#+begin_src go <<Draw subtree graph, Pr.~\ref{pr:dr}>>=
  t1 := "\t%d [color=\"lightsalmon\",style=filled]\n"
  t2 := "\t%d [label=\"%s\"]\n"
  fmt.Printf("digraph g {\n\trankdir=LR\n")
  for _, v := range subtree {
	  //<<Print $v$ and its parent, Pr.~\ref{pr:dr}>>
  }
  fmt.Printf("}\n")
#+end_src
#+begin_src latex
  We print a node , $v$, if one of two conditions holds. Either the user
  did not restrict the output to genomes-only, or the user did make this
  restriction and $v$ has a genome in its subtree. If $v$ isn't the root
  of the subtree, we look up its parent, $p$. If $p$ isn't identical to
  $v$, in other words, if $v$ is not the global root, we also print $p$
  and the connecting edge.
#+end_src
#+begin_src go <<Print $v$ and its parent, Pr.~\ref{pr:dr}>>=
  if !*optG || (*optG && hasGsub[v]) {
	  //<<Print $v$, Pr.~\ref{pr:dr}>>
	  if v != tid {
		  p := taxdb.Parent(v)
		  if p != v {
			  fmt.Printf("\t%d -> %d\n", p, v)
		  }
	  }
  }
#+end_src
#+begin_src latex
  If the node has a genome attached, or the user asked for names, we
  print an attribute line for $v$. 
#+end_src
#+begin_src go <<Print $v$, Pr.~\ref{pr:dr}>>=
  if hasGenome[v] {
	  fmt.Printf(t1, v)
  }
  if *optN {
	  fmt.Printf(t2, v, taxdb.Name(v))
  }
#+end_src
#+begin_src latex
  We've finished writing \ty{dree}, now we test it.

  \subsection*{Testing}
  Our outline for testing \ty{dree} contains hooks for imports and the
  testing logic.
#+end_src
#+begin_src go <<dree_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Pr.~\ref{pr:dr}>>
  )

  func TestDree(t *testing.T) {
	  //<<Testing, Pr.~\ref{pr:dr}>>
  }
#+end_src
#+begin_src latex
  We construct tests and run them in a loop.
#+end_src
#+begin_src go <<Testing, Pr.~\ref{pr:dr}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Pr.~\ref{pr:dr}>>
  for i, test := range tests {
	  //<<Run test, Pr.~\ref{pr:dr}>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Pr.~\ref{pr:dr}>>=
  "os/exec"
#+end_src
#+begin_src latex
  In our tests, we draw the \emph{Homininae} which have taxon-ID
  207598. First with no options, then with names, then with
  genomes, then with list.
#+end_src
#+begin_src go <<Construct tests, Pr.~\ref{pr:dr}>>=
  n := "207598"
  d := "../data/neidb"
  test := exec.Command("./dree", n, d)
  tests = append(tests, test)
  test = exec.Command("./dree", "-n", n, d)
  tests = append(tests, test)
  test = exec.Command("./dree", "-g", n, d)
  tests = append(tests, test)
  test = exec.Command("./dree", "-l", n, d)
  tests = append(tests, test)
#+end_src
#+begin_export latex
The list option can be combined with genome, and name, yielding
another three combinations to test.
#+end_export
#+begin_src go <<Construct tests, Pr.~\ref{pr:dr}>>=
  test = exec.Command("./dree", "-l", "-g", n, d)
  tests = append(tests, test)
  test = exec.Command("./dree", "-l", "-n", n, d)
  tests = append(tests, test)
  test = exec.Command("./dree", "-l", "-g", "-n", n, d)
  tests = append(tests, test)
#+end_src
#+begin_src latex
  For each test we compare the output we get with the output we want,
  which is contained in \ty{r1.txt}, \ty{r2.txt}, and so on.
#+end_src
#+begin_src go <<Run test, Pr.~\ref{pr:dr}>>=
  get, err := test.Output()
  if err != nil {
	  t.Errorf("couldn't run %q", test)
  }
  f := "r" + strconv.Itoa(i+1) + ".txt"
  want, err := ioutil.ReadFile(f)
  if err != nil {
	  t.Errorf("couldn't open %q", f)
  }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{strconv}, \ty{ioutil}, and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Pr.~\ref{pr:dr}>>=
  "strconv"
  "io/ioutil"
  "bytes"
#+end_src
