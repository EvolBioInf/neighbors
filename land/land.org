#+begin_src latex
  \section{\ty{land}}
  The program \ty{land} labels the internal nodes of a Newick tree. This
  makes it easy to subsequently pick individual clades in the tree with
  \ty{pickle}.

  \subsection*{Implementation}
  \ty{land} contains hooks for imports, functions, and the logic of the
  main function.  \bpr{land}{pr:lan}
#+end_src
#+begin_src go <<land.go>>=
  package main

  import (
	  //<<Imports, Pr.~\ref{pr:lan}>>
  )
  //<<Functions, Pr.~\ref{pr:lan}>>
  func main() {
	  //<<Main function, Pr.~\ref{pr:lan}>>
  }
#+end_src
#+begin_src latex
  \epr In the main function of \ty{land} we set the usage, declare the
  options, parse the options, and parse the input files.
#+end_src
#+begin_src go <<Main function, Pr.~\ref{pr:lan}>>=
  //<<Set usage, Pr.~\ref{pr:lan}>>
  //<<Declare options, Pr.~\ref{pr:lan}>>
  //<<Parse options, Pr.~\ref{pr:lan}>>
  //<<Parse input files, Pr.~\ref{pr:lan}>>
#+end_src
#+begin_src latex
  The usage consists of the actual usage message, an explanation of the
  purpose of \ty{land}, and an example command.
#+end_src
#+begin_src go <<Set usage, Pr.~\ref{pr:lan}>>=
  u := "land [option]... [treeFile]..."
  p := "Label the internal nodes in Newick trees."
  e := "land -p n foo.nwk"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:lan}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  The user can request the version (\ty{-v}), set a label prefix
  (\ty{-p}), or set a label suffix (\ty{-s}).
#+end_src
#+begin_src go <<Declare options, Pr.~\ref{pr:lan}>>=
  var optV = flag.Bool("v", false, "version")
  var optP = flag.String("p", "", "prefix")
  var optS = flag.String("s", "", "suffix")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:lan}>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the options and respond to a request for the version, as this
  would terminate the program.
#+end_src
#+begin_src go <<Parse options, Pr.~\ref{pr:lan}>>=
  flag.Parse()
  if *optV {
	  util.PrintInfo("land")
  }
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:lan}>>=
  "github.com/evolbioinf/neighbors/util"
#+end_src
#+begin_src latex
  The remaining tokens on the command line are interpreted as the names
  of input files. These are the argument of the function
  \ty{ParseFiles}. In addition, \ty{ParseFiles} takes as argument the
  function \ty{parse}, which in turn takes as arguments the prefix and
  the suffix.
#+end_src
#+begin_src go <<Parse input files, Pr.~\ref{pr:lan}>>=
  files := flag.Args()
  clio.ParseFiles(files, parse, *optP, *optS)
#+end_src
#+begin_src latex
  Inside \ty{parse}, we retrieve the arguments we just passed and
  iterate over the input file.
#+end_src
#+begin_src go <<Functions, Pr.~\ref{pr:lan}>>=
  func parse(r io.Reader, args ...interface{}) {
	  //<<Retrieve arguments, Pr.~\ref{pr:lan}>>
	  //<<Iterate over input, Pr.~\ref{pr:lan}>>
  }
#+end_src
#+begin_src latex
  We import \ty{io}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:lan}>>=
  "io"
#+end_src
#+begin_src latex
  We retrieve the prefix and the suffix.
#+end_src
#+begin_src go <<Retrieve arguments, Pr.~\ref{pr:lan}>>=
  pr := args[0].(string)
  su := args[1].(string)
#+end_src
#+begin_src latex
  Nodes are labeled with numbers starting from 1, so we declare a
  counter and initialize it to 1. We use a scanner to iterate over the
  lines of the input file and print each line, unless it is
  commented-out with a hashtag.
#+end_src
#+begin_src go <<Iterate over input, Pr.~\ref{pr:lan}>>=
  c := 1
  br := bufio.NewReader(r)
  bytes, err := br.ReadBytes('\n')
  for err == nil {
	  if bytes[0] != '#' {
		  //<<Print line, Pr.~\ref{pr:lan}>>
	  }
	  bytes, err = br.ReadBytes('\n')
  }
  if err != nil && err == io.EOF {
	  //<<Print line, Pr.~\ref{pr:lan}>>
  }
#+end_src
#+begin_src latex
  We import \ty{bufio}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:lan}>>=
  "bufio"
#+end_src
#+begin_src latex
  We print every bye in the input. Internal nodes are terminated by a
  closing parenthesis, which is followed by an optional label. So
  whenever we encounter a closing parenthesis, we construct the label
  and print it in double quotes. The label consists of the prefix, a
  counter that we increment, and the suffix. We terminate each line by a
  carriage return. If we reach the end of a tree, marked by a semi
  colon, we reset the node counter.
#+end_src
#+begin_src go <<Print line, Pr.~\ref{pr:lan}>>=
  for _, b := range bytes {
	  fmt.Printf("%c", b)
	  if b == ')' {
		  l := fmt.Sprintf("%s%d%s", pr, c, su)
		  fmt.Printf("%q", l)
		  c++
	  }
	  if b == ';' { c = 1 }
  }
#+end_src
#+begin_src latex
  We import \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:lan}>>=
  "fmt"
#+end_src
#+begin_src latex
  We're done writing \ty{land}, let's test it.

  \subsection*{Testing}
  The code for testing \ty{land} has hooks for imports and the testing
  logic.
#+end_src
#+begin_src go <<land_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Pr.~\ref{pr:lan}>>
  )

  func TestLand(t *testing.T) {
	  //<<Testing, Pr.~\ref{pr:lan}>>
  }
#+end_src
#+begin_src latex
  We construct a set of tests, iterate over them, and run each one.
#+end_src
#+begin_src go <<Testing, Pr.~\ref{pr:lan}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Pr.~\ref{pr:lan}>>
  for i, test := range tests {
	  //<<Run test, Pr.~\ref{pr:lan}>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Pr.~\ref{pr:lan}>>=
  "os/exec"
#+end_src
#+begin_src latex
  We construct three tests, one with default options, one where we set a
  prefix, and one where we set a suffix. Each test works on the tree
  contained in \ty{test.nwk}.
#+end_src
#+begin_src go <<Construct tests, Pr.~\ref{pr:lan}>>=
  f := "test.nwk"
  test := exec.Command("./land", f)
  tests = append(tests, test)
  test = exec.Command("./land", "-p", "p", f)
  tests = append(tests, test)
  test = exec.Command("./land", "-s", "s", f)
  tests = append(tests, test)
#+end_src
#+begin_src latex
  For a given tests, we compare the result we get with the result we
  want. The results we want are contained in files \ty{r1.txt},
  \ty{r2.txt}, and \ty{r3.txt}.
#+end_src
#+begin_src go <<Run test, Pr.~\ref{pr:lan}>>=
  get, err := test.Output()
  if err != nil {
	  t.Error(err)
  }
  f := "r" + strconv.Itoa(i+1) + ".txt"
  want, err := ioutil.ReadFile(f)
  if err != nil {
	  t.Error(err)
  }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{strconv}, \ty{ioutil}, and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Pr.~\ref{pr:lan}>>=
  "strconv"
  "io/ioutil"
  "bytes"
#+end_src

