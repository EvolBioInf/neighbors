#+begin_src latex
  \section{\ty{neighbors}}
  The program \ty{neighbors} takes as input a set of target
  taxon-IDs. It finds their most recent common ancestor, and from there
  calculates two new sets of taxon-IDs, the complete set of targets,
  which comprises at least the input taxa, and the neighbors. For each
  taxon in these two sets it also returns the accessions of the
  corresponding genome sequences.

  \subsection*{Implementation}
  The outline of \ty{neighbors} contains hooks for imports, functions,
  and the logic of the main function.
  \bpr{neighbors}{pr:neig}
#+end_src
#+begin_src go <<neighbors.go>>=
  package main

  import (
	  //<<Imports, Pr. \ref{pr:neig}>>
  )
  //<<Functions, Pr. \ref{pr:neig}>>
  func main() {
	  //<<Main function, Pr. \ref{pr:neig}>>
  }
#+end_src
#+begin_src latex
  \epr In the main function we set the usage, declare the options, parse
  the options, and respond to them. Then we open the database connection
  and parse the input files.
#+end_src
#+begin_src go <<Main function, Pr. \ref{pr:neig}>>=
  //<<Set usage, Pr. \ref{pr:neig}>>
  //<<Declare options, Pr. \ref{pr:neig}>>
  //<<Parse options, Pr. \ref{pr:neig}>>
  //<<Respond to options, Pr. \ref{pr:neig}>>
  //<<Open database connection, Pr. \ref{pr:neig}>>
  //<<Parse input files, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
  The usage consists of the actual usage message, an explanation of the
  purpose of \ty{neighbors}, and an example command. In the usage we
  clarify that the first argument of \ty{neighbors} is the name of the
  taxonomy database. In the example we show how to enter the human taxon
  ID, 9606, as target.
#+end_src
#+begin_src go <<Set usage, Pr. \ref{pr:neig}>>=
  u := "neighbors [-h] [option]... <db> [targets.txt]..."
  p := "Given a taxonomy database computed with makeNeiDb and " +
	  "a set of target taxon IDs, find their closest " +
	  "taxonomic neighbors."
  e := "neighbors -t 9606 neidb"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  Apart from the version, we declare four more options:
  \begin{itemize}
  \item \ty{-g}: restrict output to taxa with one or more genomes
  \item \ty{-l}: just list the genomes
  \item \ty{-t}: comma-delimited list of target taxon-IDs instead of IDs
    from files
  \item \ty{-T}: tab-delimited output instead of pretty printing
  \end{itemize}
#+end_src
#+begin_src go <<Declare options, Pr. \ref{pr:neig}>>=
  optV := flag.Bool("v", false, "version")
  optG := flag.Bool("g", false, "genome sequences only")
  optL := flag.Bool("l", false, "list genomes")
  optT := flag.String("t", "", "comma-delimited targets")
  optTT := flag.Bool("T", false, "tab-delimited output " +
	  "(default pretty-printing)")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the options.
#+end_src
#+begin_src go <<Parse options, Pr. \ref{pr:neig}>>=
  flag.Parse()
#+end_src
#+begin_src latex
  We respond to the version option, \ty{-v}, and the target taxon IDs,
  \ty{-t}.
#+end_src
#+begin_src go <<Respond to options, Pr. \ref{pr:neig}>>=
  //<<Respond to \ty{-v}, Pr. \ref{pr:neig}>>
  //<<Respond to \ty{-t}, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
  If the user requested the version, we print the program information,
  which includes the version.
#+end_src
#+begin_src go <<Respond to \ty{-v}, Pr. \ref{pr:neig}>>=
  if *optV {
	  util.PrintInfo("neighbors")
  }
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "github.com/evolbioinf/neighbors/util"
#+end_src
#+begin_src latex
  If the user gave target taxa, we check (s)he didn't also give input
  files. Then we collect the targets in the slice of integers we
  declare.
#+end_src
#+begin_src go <<Respond to \ty{-t}, Pr. \ref{pr:neig}>>=
  var targets []int
  if *optT != "" {
	  //<<Check there are no input files, Pr. \ref{pr:neig}>>
	  //<<Collect targets, Pr. \ref{pr:neig}>>
  }
#+end_src
#+begin_src latex
  If the user combined \ty{-t} with input files, something is wrong and
  we bail with a friendly message.
#+end_src
#+begin_src go <<Check there are no input files, Pr. \ref{pr:neig}>>=
  if len(flag.Args()) > 1 {
	  m := "please use either -t or input files, " +
		  "not both"
	  fmt.Fprintln(os.Stderr, m)
	  os.Exit(1)
  }
#+end_src
#+begin_src latex
  We import \ty{fmt} and \ty{os}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "fmt"
  "os"
#+end_src
#+begin_src latex
  We collect the target accessions in a slice of integers.
#+end_src
#+begin_src go <<Collect targets, Pr. \ref{pr:neig}>>=
  if *optT != "" {
	  ts := strings.Split(*optT, ",")
	  for _, t := range ts {
		  target, e := strconv.Atoi(t)
		  util.Check(e)
		  targets = append(targets, target)
	  }
  }
#+end_src
#+begin_src latex
  We import \ty{strings} and \ty{strconv}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "strings"
  "strconv"
#+end_src
#+begin_src latex
  The remaining tokens on the command line are file names. There should
  be at least one, the database. If there isn't, we bail with a friendly
  message, otherwise we open a database connection and remove the
  database name from the slice of file names.
#+end_src
#+begin_src go <<Open database connection, Pr. \ref{pr:neig}>>=
  files := flag.Args()
  if len(files) < 1 {
	  fmt.Fprintf(os.Stderr, "please enter a datbase")
	  os.Exit(1)
  }
  taxdb := tdb.OpenTaxonomyDB(files[0])
  files = files[1:]
#+end_src
#+begin_src latex
  We import \ty{tdb}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "github.com/evolbioinf/neighbors/tdb"
#+end_src
#+begin_src latex
  If the user supplied targets via \ty{-t}, we calculate targets and
  neighbors from them using a function we still have to write,
  \ty{calcTarNei}. Otherwise, we parse the remaining files using the
  function \ty{clio.ParseFiles}. It takes as argument the function
  \ty{parse}. In turn, \ty{parse} takes as arguments the database
  connection, the list option, the genomes option and the tab option.
#+end_src
#+begin_src go <<Parse input files, Pr. \ref{pr:neig}>>=
  if len(targets) > 0 {
	  calcTarNei(targets, taxdb, *optL, *optG, *optTT)
  } else {
	  clio.ParseFiles(files, parse, taxdb, *optL,
		  ,*optG, *optTT)
  }
#+end_src
#+begin_src latex
  The function \ty{calcTarNei} computes the targets and neighbors, looks
  up the respective genomes, and prints the result.
#+end_src
#+begin_src go <<Functions, Pr. \ref{pr:neig}>>=
  func calcTarNei(taxa []int, taxdb *tdb.TaxonomyDB,
	  list, onlyG, tab bool) {
	  //<<Compute targets, Pr. \ref{pr:neig}>>
	  //<<Compute neighbors, Pr. \ref{pr:neig}>>
	  //<<Look up genomes, Pr. \ref{pr:neig}>>
	  //<<Print result, Pr. \ref{pr:neig}>>
  }
#+end_src
#+begin_src latex
  The targets are nodes of the subtree of the most recent common
  ancestor of the taxon-IDs we just read. We call this MRCA the
  target-MRCA, \ty{mrcaT}, and calculate it from the partial taxonomy of
  the targets. The subtree rooted on the \ty{mrcaT} contains the
  complete set of targets. This complete set of targets might contain
  new targets not contained in the taxa submitted. We mark these new
  targets.
#+end_src
#+begin_src go <<Compute targets, Pr. \ref{pr:neig}>>=
  mrcaT := taxdb.MRCA(taxa)
  targets := taxdb.Subtree(mrcaT)
  //<<Mark new targets, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
  The new targets are put in a map.
#+end_src
#+begin_src go <<Mark new targets, Pr. \ref{pr:neig}>>=
  newTargets := make(map[int]bool)
  sort.Ints(taxa)
  l := len(taxa)
  for _, t := range targets {
	  i := sort.SearchInts(taxa, t)
	  if !(i < l && taxa[i] == t) {
		  newTargets[t] = true
	  }
  }
#+end_src
#+begin_src latex
  We import \ty{sort}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "sort"
#+end_src
#+begin_src latex
  The neighbors are the nodes in the subtree of the parent of the
  target-MRCA, minus the targets and the parent. We call the parent of
  the target-MRC the analysis-MRCA, \ty{mrcaA}. If the analysis-MRCA has
  no nodes other than the target(s), we keep moving it up the tree until
  we've found at least one neighbor.
#+end_src
#+begin_src go <<Compute neighbors, Pr. \ref{pr:neig}>>=
  var neighbors []int
  mrcaA := mrcaT
  for len(neighbors) == 0 {
	  mrcaA = taxdb.Parent(mrcaA)
	  nodes := taxdb.Subtree(mrcaA)
	  //<<Subtract targets from the nodes, Pr. \ref{pr:neig}>>
  }
#+end_src
#+begin_src latex
  Nodes that are not targets or \ty{mrcaA} must be neighbors.
#+end_src
#+begin_src go <<Subtract targets from the nodes, Pr. \ref{pr:neig}>>=
  sort.Ints(targets)
  l = len(targets)
  for _, node := range nodes {
	  i := sort.SearchInts(targets, node)
	  if !(i < l && node == targets[i]) {
		  if node != mrcaA {
			  neighbors = append(neighbors, node)
		  }
	  }
  }
#+end_src
#+begin_src latex
  We look up the target and the neighbor genomes and store them in a map
  between taxon-IDs and string slices.
#+end_src
#+begin_src go <<Look up genomes, Pr. \ref{pr:neig}>>=
  genomes := make(map[int][]string)
  //<<Look up target genomes, Pr. \ref{pr:neig}>>
  //<<Look up neighbor genomes, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
  We use a method call on the database to look up the accessions of the
  assemblies that belong to each target. We check the slice of
  accessions returned, and if afterwards the slice still contains at
  least one entry, we store it.
#+end_src
#+begin_src go <<Look up target genomes, Pr. \ref{pr:neig}>>=
  for _, target := range targets {
	  accessions := taxdb.Accessions(target)
	  //<<Check accessions, Pr. \ref{pr:neig}>>
	  if len(accessions) > 0 {
		  genomes[target] = accessions
	  }
  }
#+end_src
#+begin_src latex
It appears that the slice of accessions can contain hyphens in lieu of
true accessions. As an additional complication, neighbor queries for
some viruses, for example HIV (taxid 11709), return accession strings
like
\begin{verbatim}
NC_001654.1/U21603.1
\end{verbatim}
and
\begin{verbatim}
Unknown:NC_001450.1/
\end{verbatim}
So we remove the hyphens, split at the forward slash, and finally
split at the colon.
#+end_src
#+begin_src go <<Check accessions, Pr. \ref{pr:neig}>>=
  //<<Remove hyphens from accessions, Pr. \ref{pr:neig}>>
  //<<Split accessions at forward slash, Pr. \ref{pr:neig}>>
  //<<Split accessions at colon, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
We remove the hyphens from the slice of accessions and reslice it.
#+end_src
#+begin_src go <<Remove hyphens from accessions, Pr. \ref{pr:neig}>>=
  i := 0
  for _, accession := range accessions {
	  if accession != "-" {
		  accessions[i] = accession
		  i++
	  }
  }
  accessions = accessions[:i]
#+end_src
#+begin_src latex
We split accession strings at the forward slash and keep the first
entry of the array returned. If there's no forward slash, that first
entry is simply the input string. Also, note that for the example
\begin{verbatim}
Unknown:NC_001450.1/
\end{verbatim}
this step removes the trailing slash.
#+end_src
#+begin_src go <<Split accessions at forward slash, Pr. \ref{pr:neig}>>=
  for i := 0; i < len(accessions); i++ {
	  arr := strings.Split(accessions[i], "/")
	  accessions[i] = arr[0]
  }
#+end_src
#+begin_src latex
We import \ty{strings}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "strings"
#+end_src
#+begin_src latex
If an accession contains a colon, we pick the accession to its right.
#+end_src
#+begin_src go <<Split accessions at colon, Pr. \ref{pr:neig}>>=
  for i := 0; i < len(accessions); i++ {
	  arr := strings.Split(accessions[i], ":")
	  if len(arr) > 1 {
		  accessions[i] = arr[1]
	  }
  }
#+end_src
#+begin_src latex
  Like for the targets, if a neighbor has at least one genome accession,
  we store it.
#+end_src
#+begin_src go <<Look up neighbor genomes, Pr. \ref{pr:neig}>>=
  for _, neighbor := range neighbors {
	  accessions := taxdb.Accessions(neighbor)
	  //<<Check accessions, Pr. \ref{pr:neig}>>
	  if len(accessions) > 0 {
		  genomes[neighbor] = accessions
	  }
  }
#+end_src
#+begin_src latex
  We print the result using a \ty{Writer}. So we construct one and flush
  it again at the end. In between, the result consists either of a list
  of accessions, or of the full report.
#+end_src
#+begin_src go <<Print result, Pr. \ref{pr:neig}>>=
  var w io.Writer
  //<<Construct \ty{Writer}, Pr. \ref{pr:neig}>>
  if list {
	  //<<List accessions, Pr. \ref{pr:neig}>>
  } else {
	  //<<Print report, Pr. \ref{pr:neig}>>
  }
  //<<Flush writer, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
  The user can choose between tab-delimited and the default
  pretty-printed output. For tab-delimited output we use the standard
  output stream. For pretty-printing we use a tabwriter. Notice that we
  only need to flush the tab writer at the end, not the stdout.
#+end_src
#+begin_src go <<Construct \ty{Writer}, Pr. \ref{pr:neig}>>=
  if tab {
	  w = os.Stdout
  } else {
	  w = tabwriter.NewWriter(os.Stdout, 1, 0, 2, ' ', 0)
  }
#+end_src
#+begin_src latex
  We import \ty{tabwriter}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "text/tabwriter"
#+end_src
#+begin_src latex
  We print the table header before we list the targets and neighbors. To
  make these listings reproducible, we sort the targets and neighbors
  beforehand.
#+end_src
#+begin_src go <<List accessions, Pr. \ref{pr:neig}>>=
  fmt.Fprintf(w, "# Sample\tAccession\n")
  //<<Sort targets, Pr. \ref{pr:neig}>>
  //<<List targets, Pr. \ref{pr:neig}>>
  //<<Sort neighbors, Pr. \ref{pr:neig}>>
  //<<List neighbors, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
  To sort the targets, we store them as a slice of strings and sort
  that.
#+end_src
#+begin_src go <<Sort targets, Pr. \ref{pr:neig}>>=
  var acc []string
  for _, target := range targets {
	  accessions := genomes[target]
	  for _, accession := range accessions {
		  acc = append(acc, accession)
	  }
  }
  sort.Strings(acc)
#+end_src
#+begin_src latex
  We iterate over the sorted accessions and list them together with a
  marker for \emph{target}, \ty{t}.
#+end_src
#+begin_src go <<List targets, Pr. \ref{pr:neig}>>=
  sample := "t"
  for _, a := range acc {
	  fmt.Fprintf(w, "%s\t%s\n", sample, a)
  }
#+end_src
#+begin_src latex
  We sort the neighbors like we just sorted the targets, by placing them
  in the string slice we already used for the targets, and sorting that.
#+end_src
#+begin_src go <<Sort neighbors, Pr. \ref{pr:neig}>>=
  acc = acc[:0]
  for _, neighbor := range neighbors {
	  accessions := genomes[neighbor]
	  for _, accession := range accessions {
		  acc = append(acc, accession)
	  }
  }
  sort.Strings(acc)
#+end_src
#+begin_src latex
  We list the neighbors together with their marker, \ty{n}.
#+end_src
#+begin_src go <<List neighbors, Pr. \ref{pr:neig}>>=
  sample = "n"
  for _, a := range acc {
	  fmt.Fprintf(w, "%s\t%s\n", sample, a)
  }
#+end_src
#+begin_src latex
  We start the report with the taxon-IDs and scientific names of the
  most recent common ancestors of the targets and of the whole analysis,
  that is, the MRCA of the targets and neighbors combined. Then we print
  a table of results consisting of four columns: the taxon
  type---neighbor or target, the taxon-ID, taxon name, and the genome
  accessions.
#+end_src
#+begin_src go <<Print report, Pr. \ref{pr:neig}>>=
  mrcaTname := taxdb.Name(mrcaT)
  mrcaAname := taxdb.Name(mrcaA)
  fmt.Printf("# MRCA(targets): %d, %s\n", mrcaT, mrcaTname)
  fmt.Printf("# MRCA(targets+neighbors): %d, %s\n", mrcaA,
	  mrcaAname)
  fmt.Fprint(w, "# Type\tTaxon-ID\tName\tGenomes\n")
  //<<Print targets, Pr. \ref{pr:neig}>>
  //<<Print neighbors, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
  Targets that were already in the input are marked as type ``t'', new
  targets as ``tt''. We print the genome accessions in a single string
  punctuated by pipe symbols. If the user requested only taxa with
  genomes, we restrict our output to them.
#+end_src
#+begin_src go <<Print targets, Pr. \ref{pr:neig}>>=
  for _, target := range targets {
	  t := "t"
	  if newTargets[target] { t = "tt" }
	  g := "-"
	  if len(genomes[target]) > 0 {
		  g = strings.Join(genomes[target], "|")
	  }
	  if onlyG && g == "-" { continue }
	  fmt.Fprintf(w, "%s\t%d\t%s\t%s\n", t, target,
		  taxdb.Name(target),
		  strings.TrimPrefix(g, " "))
  }
#+end_src
#+begin_src latex
We import \ty{strings}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "strings"
#+end_src
#+begin_src latex
  Neighbors are marked as type ``n''. Since the targets were already
  sorted, we sort the neighbors, too.
#+end_src
#+begin_src go <<Print neighbors, Pr. \ref{pr:neig}>>=
  sort.Ints(neighbors)
  for _, neighbor := range neighbors {
	  g := "-"
	  if len(genomes[neighbor]) > 0 {
		  g = strings.Join(genomes[neighbor], "|")
	  }
	  if onlyG && g == "-" { continue }
	  n := taxdb.Name(neighbor)
	  fmt.Fprintf(w, "n\t%d\t%s\t%s\n", neighbor, n,
		  strings.TrimPrefix(g, " "))
  }
#+end_src
#+begin_src latex
  Inside \ty{parse}, we retrieve the taxonomy database, the list option,
  the genomes option, and the tab option. Then we read the taxon-IDs and
  call \ty{calcTarNei}.
#+end_src
#+begin_src go <<Functions, Pr. \ref{pr:neig}>>=
  func parse(r io.Reader, args ...interface{}) {
	  taxdb := args[0].(*tdb.TaxonomyDB)
	  optL := args[1].(bool)
	  optG := args[2].(bool)
	  optTT := args[3].(bool)
	  var taxa []int
	  //<<Read taxon-IDs, Pr. \ref{pr:neig}>>
	  calcTarNei(taxa, taxdb, optL, optG, optTT)
  }
#+end_src
#+begin_src latex
  We import \ty{io}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "io"
#+end_src
#+begin_src latex
  We read the taxon-IDs as a slice of integers from the input file. We
  ignore blank lines and lines starting with a hash.
#+end_src
#+begin_src go <<Read taxon-IDs, Pr. \ref{pr:neig}>>=
  sc := bufio.NewScanner(r)
  for sc.Scan() {
	  s := sc.Text()
	  if s == "" || s[0] == '#' { continue }
	  i, err := strconv.Atoi(s)
	  if err != nil {
		  log.Fatalf("couldn't convert %q", s)
	  }
	  taxa = append(taxa, i)
  }
#+end_src
#+begin_src latex
  We import \ty{bufio}, \ty{strconv}, and \ty{log}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:neig}>>=
  "bufio"
  "strconv"
  "log"
#+end_src
#+begin_src latex
  The last step in printing the result is to flush the tabwriter---if
  indeed we are dealing with one. So we test whether the user opted
  for pretty-printing, in which case we assert we are dealing with a
  tabwriter and flush it.
#+end_src
#+begin_src go <<Flush writer, Pr. \ref{pr:neig}>>=
  if !tab {
	  tw := w.(*tabwriter.Writer)
	  tw.Flush()
  }
#+end_src
#+begin_src latex
  We've written \ty{neighbors}, time to test it. 

  \subsection*{Testing}
  The outline for testing \ty{neighbors} has hooks for imports and the
  testing logic.
#+end_src
#+begin_src go <<neighbors_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Pr. \ref{pr:neig}>>
  )

  func TestNeighbors(t *testing.T) {
	  //<<Testing, Pr. \ref{pr:neig}>>
  }
#+end_src
#+begin_src latex
  We construct a set of tests and run each one.
#+end_src
#+begin_src go <<Testing, Pr. \ref{pr:neig}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Pr. \ref{pr:neig}>>
  for i, test := range tests {
	  //<<Run test, Pr. \ref{pr:neig}>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Pr. \ref{pr:neig}>>=
  "os/exec"
#+end_src
#+begin_src latex
  We run \ty{neighbors} on the full database with four sets of
  target-IDs, \ty{tid1.txt}, \ty{tid2.txt}, and so on. Then we test the
  options.
#+end_src
#+begin_src go <<Construct tests, Pr. \ref{pr:neig}>>=
  db := "../data/test.db"
  for i := 1; i <= 4; i++ {
	  in := "tid" + strconv.Itoa(i) + ".txt"
	  test := exec.Command("./neighbors", db, in)
	  tests = append(tests, test)
  }
  //<<Test options, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
  We import \ty{strconv}.
#+end_src
#+begin_src go <<Testing imports, Pr. \ref{pr:neig}>>=
  "strconv"
#+end_src
#+begin_src latex
  We test the four options list, \ty{-l}, genomes, \ty{-g}, tab,
  \ty{-T}, and targets, \ty{-t}.
#+end_src
#+begin_src go <<Test options, Pr. \ref{pr:neig}>>=
  //<<Test \ty{-l}, Pr. \ref{pr:neig}>>
  //<<Test \ty{-g}, Pr. \ref{pr:neig}>>
  //<<Test \ty{-T}, Pr. \ref{pr:neig}>>
  //<<Test \ty{-t}, Pr. \ref{pr:neig}>>
#+end_src
#+begin_src latex
We test the list option, \ty{-l}, on \ty{tid4.txt}.
#+end_src
#+begin_src go <<Test \ty{-l}, Pr. \ref{pr:neig}>>=
  test := exec.Command("./neighbors", "-l", db, "tid4.txt")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  Similarly, we test the genomes only option, \ty{-g}, on \ty{tid4.txt}.
#+end_src
#+begin_src go <<Test \ty{-g}, Pr. \ref{pr:neig}>>=
  test = exec.Command("./neighbors", "-g", db, "tid4.txt")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We also run the tab option, \ty{-T} on \ty{tid4.txt}.
#+end_src
#+begin_src go <<Test \ty{-T}, Pr. \ref{pr:neig}>>=
  test = exec.Command("./neighbors", "-T", db, "tid4.txt")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  The targets option, \ty{-t} doesn't require an input file. We run it
  first on a single taxon ID, then on two. The taxon IDs are taken from
  our friend \ty{tid4.txt}.
#+end_src
#+begin_src go <<Test \ty{-t}, Pr. \ref{pr:neig}>>=
  test = exec.Command("./neighbors", "-t", "46359", db)
  tests = append(tests, test)
  test = exec.Command("./neighbors", "-t",
	  "46359,1159185", db)
  tests = append(tests, test)
#+end_src
#+begin_src latex
  For a given test we compare the result we get with the result we want,
  which is contained in files \ty{r1.txt}, \ty{r2.txt}, and so on.
#+end_src
#+begin_src go <<Run test, Pr. \ref{pr:neig}>>=
  get, err := test.Output()
  if err != nil {
	  t.Errorf("couldn't run %q", test)
  }
  f := "r" + strconv.Itoa(i+1) + ".txt"
  want, err := ioutil.ReadFile(f)
  if err != nil {
	  t.Errorf("couldn't open %q", f)
  }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{ioutil} and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Pr. \ref{pr:neig}>>=
  "io/ioutil"
  "bytes"
#+end_src
