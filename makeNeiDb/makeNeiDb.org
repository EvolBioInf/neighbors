#+begin_src latex
  \section{\ty{makeNeiDb}}
  Neigbor genomes are discovered by querying a database that combines
  taxonomy and genome information. The program \ty{makeNeiDb} constructs
  this database. The outline of \ty{makeNeiDb} contains hooks for
  imports, types, and the logic of the main function.
  \bpr{makeNeiDb}{pr:db}
#+end_src
#+begin_src go <<makeNeiDb.go>>=
  package main

  import (
	  //<<Imports, Pr. \ref{pr:db}>>
  )
  func main() {
	  //<<Main function, Pr. \ref{pr:db}>>
  }
#+end_src
#+begin_src latex
  \epr
  In the main function, we declare the options, set the usage, parse the
  options, and construct the database.
#+end_src
#+begin_src go <<Main function, Pr. \ref{pr:db}>>=
  //<<Declare options, Pr. \ref{pr:db}>>
  //<<Set usage, Pr. \ref{pr:db}>>
  //<<Parse options, Pr. \ref{pr:db}>>
  //<<Construct database, Pr. \ref{pr:db}>>
#+end_src
#+begin_src latex
  The program takes as input two files of genome information and four
  files of taxonomy information. Hence we declare four options for these
  five files. In addition, we declare \ty{-d} to set the database name
  and \ty{-v} for printing the version.
#+end_src
#+begin_src go <<Declare options, Pr. \ref{pr:db}>>=
  var optG = flag.String("g", "assembly_summary_genbank.txt",
	  "genbank assemblies")
  var optR = flag.String("r", "assembly_summary_refseq.txt",
	  "refseq assemblies")
  var optA = flag.String("a", "names.dmp", "taxonomic names")
  var optO = flag.String("o", "nodes.dmp", "node information")
  var optM = flag.String("m", "merged.dmp", "merged taxa")
  var optI = flag.String("i", "images.dmp", "images")
  var optD = flag.String("d", "neidb", "database name")
  var optV = flag.Bool("v", false, "print version & " +
	  "program information")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:db}>>=
  "flag"
#+end_src
#+begin_src latex
  The usage consists of three statements. The actual usage statement,
  an explanation of the program's purpose, and an example command. In
  the explanation we cite the data sources.
#+end_src
#+begin_src go <<Set usage, Pr. \ref{pr:db}>>=
  u := "makeNeiDb [option]..."
  p := "Construct a taxonomy database for discovering " +
	  "neighbor genomes.\n\tGenomes:  " +
	  "<ftp>/genomes/ASSEMBLY_REPORTS/assembly_summary_" +
	  "(genbank|refseq).txt" +
	  "\n\tTaxonomy: <ftp>/pub/taxonomy/taxdump.tar.gz" +
	  "\n\t<ftp>=ftp.ncbi.nlm.nih.gov"
  e := "makeNeiDb -d myNew.db"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:db}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  We parse the options and respond to \ty{-v}.
#+end_src
#+begin_src go <<Parse options, Pr. \ref{pr:db}>>=
  flag.Parse()
  if *optV {
	  util.PrintInfo("makeNeiDb")
  }
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:db}>>=
  "github.com/evolbioinf/neighbors/util"
#+end_src
#+begin_src latex
  The database construction is delegated to \ty{NewTaxonomyDB}.
#+end_src
#+begin_src go <<Construct database, Pr. \ref{pr:db}>>=
  tdb.NewTaxonomyDB(*optO, *optA, *optM, *optI,
	  ,*optG, *optR, *optD)
#+end_src
#+begin_src latex
  We import \ty{tdb}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:db}>>=
  "github.com/evolbioinf/neighbors/tdb"
#+end_src
#+begin_src latex
  We are done with \ty{makeNeiDb}, time to test it.

  \subsection*{Testing}
  The outline for testing \ty{makeNeiDb} has hooks for imports and the
  testing logic.
#+end_src
#+begin_src go <<makeNeiDb_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Pr. \ref{pr:db}>>
  )

  func TestMakeNeiDb(t *testing.T) {
	  //<<Testing, Pr. \ref{pr:db}>>
  }
#+end_src
#+begin_src latex
  We construct a set of tests and run them in a loop.
#+end_src
#+begin_src go <<Testing, Pr. \ref{pr:db}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Pr. \ref{pr:db}>>
  for i, test := range tests {
	  //<<Run test, Pr. \ref{pr:db}>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Pr. \ref{pr:db}>>=
  "os/exec"
#+end_src
#+begin_src latex
  We construct a small database.
#+end_src
#+begin_src go <<Construct tests, Pr. \ref{pr:db}>>=
  test := exec.Command("./makeNeiDb",
	  "-a", "../data/namesTest.dmp",
	  "-d", "test.db",
	  "-o", "../data/nodesTest.dmp",
	  "-m", "../data/mergedTest.dmp",
	  "-i", "../data/imagesTest.dmp",
	  "-g", "../data/gbTest.txt",
	  "-r", "../data/rsTest.txt")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  Now we query the new database.
#+end_src
#+begin_src go <<Construct tests, Pr. \ref{pr:db}>>=
  test = exec.Command("/usr/bin/sqlite3",
	  "test.db",
	  "select * from taxon order by taxid")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We run the test and compare the result we get with the result we
  want. The results we want are contained in files \ty{r1.txt} and
  \ty{r2.txt}.
#+end_src
#+begin_src go <<Run test, Pr. \ref{pr:db}>>=
  get, err := test.Output()
  if err != nil {
	  t.Errorf("couldn't run %q", test)
  }
  f := "r" + strconv.Itoa(i + 1) + ".txt"
  want, err := ioutil.ReadFile(f)
  if err != nil {
	  t.Errorf("couldn't open %q", f)
  }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{strconv}, \ty{ioutil}, and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Pr. \ref{pr:db}>>=
  "strconv"
  "io/ioutil"
  "bytes"
#+end_src

