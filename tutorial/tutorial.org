#+begin_src latex
  \section*{Introduction}
  The Neighbors package provides tools for finding the target and
  neighbor genomes used by \ty{fur} to find unique regions. These unique
  regions then serve as the basis for constructing diagnostic
  markers. In this Tutorial I demonstrate the application of the seven
  programs in the Neighbors package. We begin by constructing a
  relational database from the NCBI taxonomy data using the program
  \ty{makeNeiDb}. Then we query the database with \ty{taxid} to find the
  taxon-ID for our target organism. The programs \ty{ants} and \ty{dree}
  allow us to explore the taxonomic context of our target
  organism. Based on the target taxon-ID, we carry out the search for
  target and neighbor genomes using \ty{neighbors}.

  Any genomes suggested by \ty{neighbors} are best subjected to
  phylogeny reconstruction before we extract markers from them using
  \ty{fur}. The prerequisite phylogeny reconstruction is supported by
  two additional programs from the Neighbors package, \ty{land} for
  labeling the nodes in a phylogeny, and \ty{pickle} for picking a
  particular clade in a phylogeny.

  \section*{Construct Database}
  The NCBI taxonomy database and the corresponding genome reports are
  posted at
#+end_src
#+begin_src sh <<construct.sh>>=
  ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/prokaryotes.txt
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/viruses.txt
#+end_src
#+begin_src latex
  These four files are updated regularly. To ensure the stability of
  this Tutorial, we use files downloaded on 14. September 2022:
#+end_src
#+begin_src sh <<construct.sh>>=
  wget guanine.evolbio.mpg.de/neighbors/taxdb.tgz
#+end_src
#+begin_src latex
  We unpack the database files, change into the directory containing
  them, and unpack the database dump.
#+end_src
#+begin_src sh <<construct.sh>>=
  tar -xvzf taxdb.tgz
  cd taxdb
  tar -xvzf taxdump.tar.gz
#+end_src
#+begin_src latex
  We can now construct the taxonomy database, \ty{neidb}, using
  \ty{makeNeiDb}. This takes approximately half a minute.
#+end_src
#+begin_src sh <<construct.sh>>=
  makeNeiDb
#+end_src
#+begin_src latex
  \section*{Query Database}
  The next step is to find the taxon-IDs for our target organism or
  target organisms. Say, our target organism is the bactrium
  \emph{Aerococcus urinae}, which causes urinary tract infections. We
  look up its taxon-ID using \ty{taxi}.
#+end_src
#+begin_src sh <<query.sh>>=
  taxi "Aerococcus urinae" neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # ID    Parent  Name
    1376  1375    Aerococcus urinae
  \end{verbatim}
  This tells us that \emph{Aerococcus urinae} has taxon-ID 1376
  and its parent has taxon-ID 1375. If we are interested in the wider
  taxonomic context of \emph{A. urinae}, we can look up all its
  ancestors with \ty{ants} to find that \emph{A. urinae} belongs to the
  Firmicutes.
#+end_src
#+begin_src sh <<query.sh>>=
  ants 1376 neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Back  ID       Name
    9     1        root
    8     131567   cellular organisms
    7     2        Bacteria
    6     1783272  Terrabacteria group
    5     1239     Firmicutes
    4     91061    Bacilli
    3     186826   Lactobacillales
    2     186827   Aerococcaceae
    1     1375     Aerococcus
    0     1376     Aerococcus urinae
  \end{verbatim}
#+end_src
#+begin_src sh <<query.sh>>=
  dree 1375 neidb | dot -T x11
#+end_src
#+begin_src latex
  Unfortunately, this tree is so large, it's illegible. So we restrict
  it to the clades with sequenced genomes and get Figure~\ref{fig:au1},
  where taxa with sequenced genomes are colored.
#+end_src
#+begin_src sh <<query.sh>>=
  dree -g 1375 neidb | dot -T x11
#+end_src
#+begin_src latex
  \begin{figure}
    \begin{center}
      \resizebox{\textwidth}{!}{\includegraphics{../tutorial/1375_t_g.ps}}
    \end{center}
    \caption{The taxonomy of \emph{Aerococcus} (1375) restricted to taxa
      with sequenced genomes, which are shown as colored
      nodes.}\label{fig:au1}
  \end{figure}
  Since taxon-IDs are difficult to interpret, we convert them to taxon
  names in Figure~\ref{fig:au2}.
#+end_src
#+begin_src sh <<query.sh>>=
  dree -n -g 1375 neidb | dot -T x11
#+end_src
#+begin_src latex
  \begin{figure}
    \begin{center}
      \resizebox{\textwidth}{!}{\includegraphics{../tutorial/1375_n_g.ps}}
    \end{center}
    \caption{The taxonomy tree of \emph{Aerococcus} with sequenced
      genomes and taxon names.}\label{fig:au2}
  \end{figure}
  Now we search for the neighbors of \emph{Aerococcus}.
#+end_src
#+begin_src sh <<query.sh>>=
  printf "1376" | neighbors -g neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # MRCA(targets): 1376, Aerococcus urinae
  # MRCA(targets+neighbors): 1375, Aerococcus
  # Type  Taxon-ID  Name                      Genomes
  t       1376      Aerococcus urinae         CP014161|CP065662
  tt      866775    Aerococcus urinae ACS     CP002512
  n       1377      Aerococcus viridans       CP014164
  n       51665     Aerococcus urinaeequi     CP013988|CP014162|...
  n       87541     Aerococcus christensenii  CP014159
  n       119206    Aerococcus sanguinicola   CP014160
  n       128944    Aerococcus urinaehominis  CP014163
  \end{verbatim}
  The output of \ty{neighbors} begins with three hashed lines. The first
  states the most recent common ancestor of the targets,
  \emph{A. urinae} with taxon-ID 1376. The second states the most recent
  common ancestor of the neighbors and the targets, \emph{Aerococcus},
  with taxon-ID 1375. The third hashed row is the header of the
  subsequent table, which consists of four columns, type, taxon-ID,
  name, and genomes. There are three possible types, ``t'' for known
  target, ``tt'' for new target, and ``n'' for neighbor. We see the new
  target 866775, which was already in Figure~\ref{fig:au1}, but wasn't
  contained in our query. We download the three target sequences, mark
  their names with prefix ``t'', and store them in the directory
  \ty{targets}.
#+end_src
#+begin_src sh <<query.sh>>=
  mkdir targets
  for a in CP014161 CP065662 CP002512
  do
      efetch -db nucleotide -format fasta \
	     -id $a > targets/t${a}.fasta
  done
#+end_src
#+begin_src latex
  When looking for neighbor genomes, we ignore plasmid sequences, which
  leaves seven genomes among the neighbors. Like the targets, we fetch
  the neighbors using a loop over their accessions, mark their names
  with prefix ``n'', and store them in the directory \ty{neighbors}.
#+end_src

#+begin_src sh <<query.sh>>=
  mkdir neighbors
  for a in CP014164 CP013988 CP014162 CP063065 \
	   CP014159 CP014160 CP014163
  do
      efetch -db nucleotide -format fasta \
	     -id $a > neighbors/n${a}.fasta
  done
#+end_src
#+begin_src latex
  We compute a quick phylogeny for the target and neighbor genomes using
  \ty{phylonium}\footnote{\ty{github.com/evolbioinf/phylonium}} and
  programs form the
  \ty{biobox}\footnote{\ty{github.com/evolbioinf/biobox}}. The result in
  Figure~\ref{fig:auTree} shows that the targets are monophyletic, which
  is necessary for a successful \ty{fur} run.
  \begin{figure}
    \begin{center}
      \scalebox{0.75}{\includegraphics{../tutorial/au}}
    \end{center}
    \caption{Phylogeny of target and neighbor genomes; targets are
      prefixed ``t'', neighbors ``n''.}\label{fig:auTree}
  \end{figure}
#+end_src
#+begin_src sh <<query.sh>>=
  phylonium targets/* neighbors/* | nj | midRoot > au.nwk
  plotTree au.nwk
#+end_src
#+begin_src latex
  Now we can construct the \ty{fur} database with \ty{makeFurDb} and run
  \ty{fur}\footnote{\ty{github.com/evolbioinf/fur}} on it to get
  approximately 474 kb potential marker material after cleaning with
  \ty{cleanSeq}, which is part of the \ty{fur} package. The program
  \ty{cres} used to quantify the output of \ty{fur} is also part of the
  \ty{biobox}.
#+end_src
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets/ -n neighbors/ -d au.db
  fur -d au.db | cleanSeq > au.fasta
  cres au.fasta
#+end_src
#+begin_src latex
  If we look again at the phylogeny in Figure~\ref{fig:auTree}, we might
  want to rethink the position of CP002512. Perhaps it should be a
  neighbor rather than a target? This of course depends on the details
  of our test system. But let's say we make CP002512 a neighbor; then
  our set of potential markers shrinks to 105 kb.
#+end_src
#+begin_src sh <<query.sh>>=
  mv targets/tCP002512.fasta neighbors/
  makeFurDb -t targets/ -n neighbors/ -d au2.db
  fur -d au2.db/ | cleanSeq > au2.fasta
  cres au2.fasta
#+end_src
#+begin_src latex
  We might extend this analysis by making CP002512 the target and
  everything else the neighors. This returns 190 kb marker material.
#+end_src
#+begin_src sh <<query.sh>>=
  mv targets/* neighbors/
  mv neighbors/tCP002512.fasta targets/
  makeFurDb -t targets/ -n neighbors/ -d au3.db
  fur -d au3.db/ | cleanSeq > au3.fasta
  cres au3.fasta
#+end_src
#+begin_src latex
  \subsection*{Pick Clades from Phylogeny}
  Sometimes a tree of genomes is very large, making it inconvenient to
  manually list the taxa that belong to a particular clade. This isn't
  an issue in our analysis (Figure~\ref{fig:auTree}), but if it were, we
  could use the programs \ty{land} and \ty{pickle} to first label and
  then pick individual clades. \ty{land} labels the nodes in a tree,
  yielding Figure~\ref{fig:auTree2}.
  \begin{figure}
    \begin{center}
      \scalebox{0.75}{\includegraphics{../tutorial/au2}}
    \end{center}
    \caption{Phylogeny of target and neighbor genomes with internal
      nodes, or \emph{clades}, labeled.}\label{fig:auTree2}
  \end{figure}
#+end_src
#+begin_src sh <<query.sh>>=
  land au.nwk > au2.nwk
  plotTree au2.nwk
#+end_src
#+begin_src latex
  Now we can pick a clade, say clade 7, and print its five leaf labels
  with \ty{pickle}.
#+end_src
#+begin_src sh <<query.sh>>=
  pickle 7 au2.nwk
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Selected clades
  ## 7
  nCP014163
  nCP063065
  nCP014164
  nCP013988
  nCP014162
  \end{verbatim}
#+end_src
