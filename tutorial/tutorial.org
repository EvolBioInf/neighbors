#+begin_src latex
  \section*{Introduction}
  The Neighbors package provides tools for finding the target and
  neighbor genomes used to identify regions that are ubiquitous in the
  targets and absent from the neighbors. These target regions are a good
  starting point for constructing diagnostic markers. In this Tutorial I
  demonstrate the application of the nine programs in the Neighbors
  package listed in Table~\ref{tab:pro}. We begin by constructing a
  local relational database from the NCBI taxonomy using the program
  \ty{makeNeiDb}. Then we query the database with \ty{taxid} to find the
  taxon-ID for our target organism, serotype O157:H7 of
  \emph{Escherichia coli}. The programs \ty{ants} and \ty{dree} allow us
  to explore the taxonomic context of our target organism. Based on the
  target taxon-ID, we carry out the search for target and neighbor
  genomes using \ty{neighbors}.

  Any genomes suggested by \ty{neighbors} are best subjected to
  phylogeny reconstruction before we extract marker candidates from
  them. The prerequisite phylogeny reconstruction is done with
  \ty{phylonium}\footnote{\ty{https://github.com/evolbioinf/phylonium}}. The
  resulting tree can be very large and its analysis is supported by
  three additional programs from the Neighbors package, \ty{land} for
  labeling the nodes in a phylogeny, \ty{pickle} for picking a
  particular clade in a phylogeny, and \ty{fintac} for finding the
  target clade. Actual marker discovery is done with
  \ty{fur}\footnote{\ty{https://github.com/evolbioinf/fur}}.

  \section*{Construct Database}
  A dump of the current NCBI taxonomy database is posted as a tar ball at
  \begin{verbatim}
  ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz
  \end{verbatim}
  The corresponding genome reports for prokaryotes, eukaryotes, and
  viruses are posted at
  \begin{verbatim}
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/prokaryotes.txt
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/viruses.txt
  \end{verbatim}
#+end_src
#+begin_src latex
  The database dump and the genome reports are updated regularly. To
  ensure the stability of this Tutorial, we use files downloaded on
  21st September 2023:
#+end_src
#+begin_src sh <<db.sh>>=
  wget guanine.evolbio.mpg.de/neighbors/neidb_210923.tgz
#+end_src
#+begin_src latex
  We unpack the database files, delete the tar file, and change into the new
  directory \ty{neidb\_210923}.
#+end_src
#+begin_src sh <<db.sh>>=
  tar -xvzf neidb_210923.tgz
  rm neidb_210923.tgz
  cd neidb_210923
#+end_src
#+begin_src latex
  We can now construct the taxonomy database, \ty{neidb}, using
  \ty{makeNeiDb}. This takes approximately 43s. Then we return to the
  parent directory, move the database \ty{neidb} there, and remove the
  directory used in its construction.
#+end_src
#+begin_src sh <<db.sh>>=
  makeNeiDb
  cd ../
  mv neidb_210923/neidb .
  rm -r neidb_210923
#+end_src
#+begin_src latex
  \section*{Query Database}
  The next step is to find the taxon-IDs for one or more target
  organisms. Our target organism is the bactrium \emph{E. coli}
  O157:H7, a cause of severe diarrhea in humans. We look up its
  taxon-ID using \ty{taxi} in substring mode (\ty{-s}). For each taxon
  we get the ID, the parent ID, and the name.
#+end_src
#+begin_src sh <<query.sh>>=
  taxi -s "O157:H7" neidb | head
#+end_src
#+begin_src latex
  \begin{verbatim}
  # ID       Parent  Name
    1446642  83334   Escherichia coli O157:H7 str. 2011EL-2112
    991906   83334   Escherichia coli O157:H7 str. 611
    1446651  83334   Escherichia coli O157:H7 str. 2011EL-2313
  ...
  \end{verbatim}
  Our \ty{taxi} query returns 137 distinct taxa.
#+end_src
#+begin_src sh <<query.sh>>=
  taxi -s "O157:H7" neidb |
      tail -n +2 |
      wc -l
#+end_src
#+begin_export latex
In order to find out the taxon that summarizes all O157:H7 strains, we
sort and count the parent taxa to find that 136 of our 137 taxa have
parent 83334, which in turn has parent 562.
#+end_export
#+begin_src sh <<query.sh>>=
  taxi -s O157:H7 neidb |
      tail -n +2 |
      awk '{print $2}' |
      sort |
      uniq -c
#+end_src
#+begin_export latex
\begin{verbatim}
      1 562
    136 83334
\end{verbatim}
We can use \ty{dree} to visualize the taxonomic tree rooted on taxon
83334. The output of \ty{dree} is in dot notation, which we render
into the tree shown in Figure~\ref{fig:ec1} using the program \ty{dot}
from the graphviz package. Figure~\ref{fig:ec1} is too cramped for
reading, but we can see that the tree has only two levels and that
most of its nodes are colored, which means they are linked to
genome sequences.
\begin{figure}
  \begin{center}
    \resizebox{!}{0.9\textheight}{\includegraphics{../tutorial/ec1.ps}}
  \end{center}
\caption{The taxonomic tree of \emph{E. coli} O157:H7 drawn with
  \ty{dree}; taxa with sequenced genomes are shown in color.}\label{fig:ec1}
\end{figure}
#+end_export
#+begin_src sh <<query.sh>>=
  dree 83334 neidb
#+end_src
#+begin_export latex
We saw previously that the parent of 83334 is taxon 562. To find out
its identity, we use \ty{ants} to print the ancestors of 83334. It
turns out that taxon 562 is the species \emph{E. coli}.
#+end_export
#+begin_src sh <<query.sh>>=
  ants 83334 neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Back  ID      Name                      Rank
    9     1       root                      no rank
    8     131567  cellular organisms        no rank
    7     2       Bacteria                  superkingdom
    6     1224    Proteobacteria            phylum
    5     1236    Gammaproteobacteria       class
    4     91347   Enterobacterales          order
    3     543     Enterobacteriaceae        family
    2     561     Escherichia               genus
    1     562     Escherichia coli          species
    0     83334   Escherichia coli O157:H7  serotype
  \end{verbatim}
#+end_src
#+begin_export latex
In the tree returned by \ty{dree}, the number of genomes per node is
reduced to presence/absence. To get the distribution of genomes across
a subtree, we can list its nodes.
#+end_export
#+begin_src sh <<query.sh>>=
  dree -l 83334 neidb | head
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Taxid  Rank      Genomes
  83334    serotype  190
  1446642  strain    1
  991906   strain    0
  ...
  \end{verbatim}
  We add taxon names to the list.
#+end_src
#+begin_src sh <<query.sh>>=
  dree -l -n 83334 neidb | head
#+end_src
#+begin_export latex
\begin{verbatim}
# Taxid  Rank      Genomes  Name
83334    serotype  190      Escherichia coli O157:H7
1446642  strain    1        Escherichia coli O157:H7 str. ...
991906   strain    0        Escherichia coli O157:H7 str. 611
...
\end{verbatim}
#+end_export
#+begin_export latex
There are 329 genomes for serotype O157:H7.
#+end_export
#+begin_src sh <<query.sh>>=
  dree -n -l 83334 neidb |
      tail -n +2 |
      awk '{s += $3}END{print s}'
#+end_src
#+begin_export latex
We can reverse-sort the taxon list by the number of genomes to see
that it ranges from 190 to 0.
#+end_export
#+begin_src sh <<query.sh>>=
  dree -n -l 83334 neidb |
      tail -n +2 |
      sort -k 3 -n -r
#+end_src
#+begin_export latex
\begin{verbatim}
83334    serotype  190      Escherichia coli O157:H7
155864   strain    7        Escherichia coli O157:H7 str. EDL933
1343836  strain    2        Escherichia coli O157:H7 str. F8092B
1286877  strain    2        Escherichia coli O157:H7 str. TW14313
997825   strain    1        Escherichia coli O157:H7 str. 1125
...
1240385  strain    1        Escherichia coli O157:H7 str. ...
991907   strain    0        Escherichia coli O157:H7 str. 262
991906   strain    0        Escherichia coli O157:H7 str. 611
886670   strain    0        Escherichia coli O157:H7 str. ZAP430
410290   strain    0        Escherichia coli O157:H7 str. ...
1046240  strain    0        Escherichia coli O157:H7 str. 121
\end{verbatim}
#+end_export
#+begin_export latex
Now we search for the neighbors of O157:H7 using \ty{neighbors}. We
restrict the output from \ty{neighbors} to taxa with genome sequences.
#+end_export
#+begin_src sh <<query.sh>>=
  printf 83334 | neighbors -g neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # MRCA(targets): 83334, Escherichia coli O157:H7
  # MRCA(targets+neighbors): 562, Escherichia coli
  # Type  Taxon-ID  Name                         Genomes
  t       83334     Escherichia coli O157:H7     GCA_001695515.1|...
  tt      155864    Escherichia coli O157:H7...  GCA_000732965.1|...
  tt      386585    Escherichia coli O157:H7...  GCA_000008865.2
  tt      444447    Escherichia coli O157:H7...  GCA_000181735.1
  ...
  n       3050630   Escherichia coli O78:H51     GCA_030347055.1|...
  \end{verbatim}
  I've slightly edited the output of \ty{neighbors} for clarity. It
  begins with three hashed lines. The first states the most recent
  common ancestor of the targets, \emph{E. coli} O157:H7, with taxon-ID
  83334. The second line states the most recent common ancestor of the
  neighbors \emph{and} the targets, \emph{E. coli}, taxon 562. The third
  line is the header of the subsequent table, which consists of four
  columns, type, taxon-ID, name, and genomes. There are three possible
  types, ``t'' for known target, ``tt'' for new target, and ``n'' for
  neighbor.

  We can check that the \ty{neighbors} output also contains the 329
  target genomes we previously listed with \ty{dree}.
#+end_src
#+begin_src sh <<query.sh>>=
  printf 83334 |
      neighbors -l neidb |
      tail -n +2 |
      grep '^t' |
      wc -l
#+end_src
#+begin_export latex
To download the target and neighbor genomes, we need the genome
accessions. These are a bit difficult to extract from the ``report
view'' of the \ty{neighbors} results. So we use the ``list view''
instead. It consists of two columns, sample (target or neighbor) and
accession.
#+end_export
#+begin_src sh <<query.sh>>=
  printf 83334 | neighbors -l neidb | head
#+end_src
#+begin_export latex
\begin{verbatim}
# Sample  Accession
t         GCA_001695515.1
t         GCA_017165115.1
t         GCA_017165395.1
...
\end{verbatim}
#+end_export
#+begin_export latex
We save the accessions to the file \ty{acc.txt}.
#+end_export
#+begin_src sh <<query.sh>>=
  printf 83334 | neighbors -l neidb > acc.txt
#+end_src
#+begin_export latex
Apart from the 329 target genomes we've already seen, there are a
staggering 3127 neighbor genomes.
#+end_export
#+begin_src sh <<query.sh>>=
  grep -c '^n' acc.txt
#+end_src
#+begin_export latex
To download the sequences, we split the accessions into two files,
\ty{tacc.txt} for the targets and \ty{nacc.txt} for the neighbors.
#+end_export
#+begin_src sh <<query.sh>>=
  grep '^t' acc.txt | awk '{print $2}' > tacc.txt
  grep '^n' acc.txt | awk '{print $2}' > nacc.txt
#+end_src
#+begin_export latex
We use the program \ty{datasets} provided by the NCBI to download
genomes. It is available from the \ty{datasets} web site,
\begin{center}
\ty{https://www.ncbi.nlm.nih.gov/datasets/}  
\end{center}
We restrict our analysis to genomes with assembly-level ``complete''
and exclude genomes flagged as ``atypical''. We download the genomes
in ``dehydrated'' form. We begin with the target genomes, of which
there are 143. This means out of the 329 target genomes across all
assembly levels, only 143 are typical and complete. We save the target
genomes in \ty{tdata.zip}.
#+end_export
#+begin_src sh <<query.sh>>=
  datasets download genome accession \
	   --inputfile tacc.txt \
	   --assembly-level complete \
	   --exclude-atypical \
	   --dehydrated \
	   --filename tdata.zip
#+end_src
#+begin_export latex
We repeat the download for the neighbor genomes, where only 306 out of
the 3127 pass muster.
#+end_export
#+begin_src sh <<query.sh>>=
  datasets download genome accession \
	   --inputfile nacc.txt \
	   --assembly-level complete \
	   --exclude-atypical \
	   --dehydrated \
	   --filename ndata.zip
#+end_src
#+begin_export latex
The genomes arrive as zipped archives. We unzip the targets into the
directory \ty{tdata}.
#+end_export
#+begin_src sh <<query.sh>>=
  unzip tdata.zip -d tdata
#+end_src
#+begin_export latex
We unzip the neighbors into the directory \ty{ndata}.
#+end_export
#+begin_src sh <<query.sh>>=
  unzip ndata.zip -d ndata
#+end_src
#+begin_export latex
We rehydrate the 143 target genomes.
#+end_export
#+begin_src sh <<query.sh>>=
  datasets rehydrate --directory tdata
#+end_src
#+begin_export latex
We rehydrate the 306 neighbor genomes.
#+end_export
#+begin_src sh <<query.sh>>=
  datasets rehydrate --directory ndata
#+end_src
#+begin_export latex
For easier handling, we move all genomes into a new directory,
\ty{all}. We begin with the targets. To help dividing the data into
true, i. e. phylogenetic, targets and neighbors later, we give target
genomes the prefix \ty{t}.
#+end_export
#+begin_src sh <<query.sh>>=
  mkdir all
  for a in tdata/ncbi_dataset/data/*/*.fna
  do
      b=$(basename $a)
      mv $a all/t$b
  done
#+end_src
#+begin_export latex
We also move the neighbor genomes into \ty{all} and mark their names
with prefix \ty{n}.
#+end_export
#+begin_src sh <<query.sh>>=
  for a in ndata/ncbi_dataset/data/*/*.fna
  do
      b=$(basename $a)
      mv $a all/n$b
  done
#+end_src
#+begin_export latex
We've now got the taxonomic targets and neighbors united in the
directory \ty{all}, but distinguishable by their prefix. Our next task
is to extract from this data set the phylogenetic---as opposed to
taxonomic---targets and neighbors. We do this by calculating a
distance-based phylogeny from the target and neighbor genomes. We
calculate the requisite distances using the program
\ty{phylonium}\footnote{\ty{https://github.com/evolbioinf/phylonium}}
and save them in \ty{o157.dist}. This takes about one and a half
minutes.
#+end_export
#+begin_src sh <<query.sh>>=
  phylonium all/* > o157.dist
#+end_src
#+begin_export latex
We calculate the neighbor-joining tree from the distances with \ty{nj}
and midpoint root it with \ty{midRoot}. Both programs are part of the
the biobox\footnote{\ty{https://github.com/evolbioinf/biobox}}. Then
we label the internal nodes of the phylogeny with \ty{land}, which is
part of Neighbors, and save the final tree in \ty{o157.nwk}.
#+end_export
#+begin_src sh <<query.sh>>=
  nj o157.dist | midRoot | land > o157.nwk
#+end_src
#+begin_export latex
The tree in \ty{o157.nwk} is in the popular Newick format, and you can
render it with your favorite tree plotting program. One example of
such a program is \ty{plotTree} from the biobox. Its default plot
dimensions are too small for our tree of 449 taxa, so we set the
dimensions to $1200\times 1200$ pixels.
#+end_export
#+begin_src sh <<query.sh>>=
  plotTree -d 1200,1200 o157.nwk
#+end_src
#+begin_export latex
However, even at this magnification the taxon labels are difficult to
read. So we replace the neighbors by a simple \ty{n}, which reveals
that the targets are concentrated in the top part of the tree.
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/n[^f]*fna/n/g' o157.nwk |
      plotTree -d 1200,1200
#+end_src
#+begin_export latex
To further explore the target region of our tree, let's pick the
subtree rooted on node 268 as it appears to contain most targets and a
bit of neighbor context. We do this with \ty{pickle} in tree mode,
\ty{-t}. We now see that node 291 contains a lone target, while its
other child, node 292, contains most of the targets and a closely
related neighbor clade.
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/n[^f]*fna/n/g' o157.nwk |
      pickle -t 268 |
      plotTree -d 1200,1200 
#+end_src
#+begin_export latex
To make the target clade easier to read, we further zoom into it by
picking node 292. This shows us that the targets are in clade 300,
while its sister clade 293 contains eight neighbors.
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/n[^f]*fna/n/g' o157.nwk |
      pickle -t 292 |
      plotTree -d 1200,1200 
#+end_src
#+begin_export latex
At this magnification, you might notice that there are also taxonomic
neighbors interspersed in our target clade. We count nine such
misclassified taxa, which we treat as targets in subsequent analyses.
#+end_export
#+begin_src sh <<query.sh>>=
  pickle 300 o157.nwk |
      grep -c '^n'
#+end_src
#+begin_export latex
Let's remove a chunk of the target clade to make it easier to read
both the leaf labels and node labels. Nodes can be removed by using
\ty{pickle} in both tree and complement mode. Let's remove node 312.
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/n[^f]*fna/n/g' o157.nwk |
      pickle -t 292 |
      pickle -t -c 312 |
      plotTree -d 1200,1200
#+end_src
#+begin_export latex
Now we also reduce the target labels to their first character and plot
the reduced tree rooted on 291 shown in Figure~\ref{fig:o157}.
\begin{figure}
\begin{center}
\includegraphics{../tutorial/ec2.ps}
\end{center}
\caption{Part of the tree containing target and neighbor genomes of
  \emph{E. coli} O157:H7; leaf labels are reduced to targets
  (\emph{t}) and neighbors (\emph{n}). }\label{fig:o157}
\end{figure}
#+end_export
#+begin_src sh <<query.sh>>=
  sed -E 's/([nt])[^f]*fna/\1/g' o157.nwk |
      pickle -t 291 |
      pickle -t -c 312 |
      plotTree -d 1200,1200
#+end_src
#+begin_export latex
In Figure~\ref{fig:o157} clade 300 is our target clade, which took us
a while to discover. Our discovery process is encapsulated in the
program \ty{fintac}, which finds the target clade by looking for the
clade that maximizes the sum of the targets inside its subtree and the
neighbors outside.
#+end_export
#+begin_src sh <<query.sh>>=
  fintac o157.nwk
#+end_src
#+begin_export latex
\begin{verbatim}
#Clade  Parent  Split (%)
300     292     97.6
\end{verbatim}
We can also use the \ty{-a} option of \ty{fintac} to list all splits.
#+end_export
#+begin_src sh <<query.sh>>=
  fintac -a o157.nwk | head
#+end_src
#+begin_export latex
\begin{verbatim}
#Clade  Parent  Split (%)
300     292     97.6
302     300     97.1
304     302     96.7
291     290     96.0
290     271     95.8
292     291     95.8
311     304     95.1
312     311     94.9
271     270     91.5
\end{verbatim}
The closely related sister clade of 300, 293, is made up of
neighbors. As we already noted, the root of this partial tree, 291, is
connected to a singleton branch leading to a target. This is one of
two taxonomic targets outside of clade 300.
#+end_export
#+begin_src sh <<query.sh>>=
  pickle -c 300 o157.nwk | grep '^t'
#+end_src
#+begin_export latex
\begin{verbatim}
tGCA_022558925.1_ASM2255892v1_genomic.fna
tGCA_003722195.1_ASM372219v1_genomic.fna
\end{verbatim}

Since the distance between this lone putative target and
the many targets in clade 300 is substantial, we reassign the loner as
a neighbor.

We begin our search for markers by splitting our tree into targets,
i. e. clade 300, and neighbors, the precise difinition of which comes
later.

To separate the targets, we make a directory, \ty{targets}. Then we
use \ty{pickle} in default mode to list the taxa in the target
clade. For each taxon we create a symbolic link to the original data.
#+end_export
#+begin_src sh <<query.sh>>=
  mkdir targets
  pickle 300 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/targets/$a
      done
#+end_src
#+begin_export latex
The program \ty{fur} works on the idea that the \emph{closest}
neighbors are the most informative for marker discovery. So we
construct our neighbor set from the genomes in clade 293.
#+end_export
#+begin_src sh <<query.sh>>=
  mkdir neighbors
  pickle 293 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_export latex
In preparation for running \ty{fur}, we make its database with
\ty{makeFurDb}. Since the database is used to compare the targets in
node 300 with the neighbors in node 293, we call it \ty{300\_293.db}. Its
construction takes approximately 25 s.
#+end_export
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets/ -n neighbors/ -d 300_293.db
#+end_src
#+begin_export latex
Given the database, we can apply \ty{fur} to it. This takes nine
seconds and returns 8.6 kb marker candidates, of which 2.2 kb are
\ty{N}s. We save these sequences in the file \ty{300\_293.fasta}.
#+end_export
#+begin_src sh <<query.sh>>=
  fur -d 300_293.db > 300_293.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length    Ns
  -------------  ---------  ------    --
  Subtraction_1        247  226718     0
  Intersection          44   16383   504
  Subtraction_2         12    8668  2201
\end{verbatim}

To check whether these markers crosshybridize with markers in the
wider neighborhood, we repeat the analysis with a neighborhood
consisting of everything but node 300 making up the neighborhood.
#+end_export
#+begin_src sh <<query.sh>>=
  rm neighbors/*
  pickle -c 300 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_export latex
The new database compares clade 300 to everything else in the tree, so
we call it \ty{300.db}. Its construction takes 13.5 minutes.
#+end_export
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets -n neighbors -d 300.db
#+end_src
#+begin_export latex
Now the intersection step of \ty{fur} comes up empty.
#+end_export
#+begin_src sh <<query.sh>>=
  fur -d 300.db
#+end_src
#+begin_export latex
\begin{verbatim} 
  Step           Sequences  Length  Ns
  -------------  ---------  ------  --
  Subtraction_1         30   24281   0
  Intersection           0       0   0
\end{verbatim}

An empty intersection after a non-empty subtraction implies the target
representative contains material that is absent from all neighbors,
but not present in all other targets. This seems odd. Now, the
requirement that markers be present in all targets means that a single
atypical target genome can wipe out markers found everywhere else. So
our next task is to look for atypical genomes among the targets.

When we downloaded the data, we already excluded genomes deemed
``atypical'' by the program \ty{datasets} based on about a dozen
criteria. We concentrate on genome length. According to \ty{datasets},
a genome is atypical if it is 50\% larger or smaller than the average
genome
length\footnote{\ty{https://www.ncbi.nlm.nih.gov/datasets/docs/v2/troubleshooting/faq/}\\ \ty{\#what-are-atypical-genomes}}. If
we think of atypical genomes as outliers, this definition is somewhat
unorthodox. A more common definition of outliers is based on the
distance between the first and third quartile of a distribution. This
definition is implemented in the program \ty{outliers}, which is also
part of Neighbors. For each target genome, we extract its name and its
length and save the data in \ty{tlen.dat}.
#+end_export
#+begin_src sh <<query.sh>>=
  for a in targets/*.fna; do
      echo -n $a ' ';cres $a |
	  grep To |
	  awk '{print $2}'
  done > tlen.dat
#+end_src
#+begin_export latex
When we search the genome lengths for outliers, we find three mildly
large and one extremely short genome.
#+end_export
#+begin_src sh <<query.sh>>=
  awk '{print $2}' tlen.dat | outliers
#+end_src
#+begin_export latex
\begin{verbatim}
#Lower_outer_fence  Lower_inner_fence  Lower_quartile...
5.24282e+06         5.399746625e+06    5.55667325e+06...
Mild_outliers: 5.825793e+06 5.831209e+06 5.8662e+06
Extreme_outlier: 4.869019e+06
\end{verbatim}
#+end_export
#+begin_export latex
Let's find the name of the extremely short genome, remove it from the
targets, and rerun the analysis. This time the intersection is not
empty and contains 2.8 kb, but we lose it all in the second
subtraction step.
#+end_export
#+begin_src sh <<query.sh>>=
  awk '$2==4.869019e+06' tlen.dat
  rm targets/tGCA_030908645.1_ASM3090864v1_genomic.fna
  makeFurDb -t targets -n neighbors -o -d 300.db
  fur -d 300.db
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length  Ns
  -------------  ---------  ------  --
  Subtraction_1         39   28967   0
  Intersection           7    2750  13
  Subtraction_2          0       0   0
\end{verbatim}
#+end_export
#+begin_export latex
For the second subtraction step \ty{fur} calls Blast. By default this
runs in the sensitive blastn mode. However, we can switch to the less
sensitive megablast mode, which leaves two fragment with a total of
210 bp. Not much, but much more than nothing.
#+end_export
#+begin_src sh <<query.sh>>=
  fur -d -m 300.db
#+end_src
#+begin_export latex
\begin{verbatim}
fur -m -d 300.db/ > 300.fasta
  Step           Sequences  Length  Ns
  -------------  ---------  ------  --
  Subtraction_1         39   28967   0
  Intersection           7    2750  13
  Subtraction_2          2     210   0
\end{verbatim}
#+end_export
#+begin_export latex
In an attempt to improve our marker yield, we look for nested
markers. Notice that in Figure~\ref{fig:o157} the branch separating
node 291 from node 292 is much longer than the branch separating
clades 300 and 293. So we begin our search for nested markers by again
looking for regions that distinguish targets 300 from neighbors 293,
only this time we don't include the extremely short genome. In a
second step we'll compare targets 292 to everything else. But first we
compare 300 vs. 293, which gives 13.3 kb markers with almost 5 kb
\ty{N}s, up from 8.8 kb in our previous analysis.
#+end_export
#+begin_src sh <<query.sh>>=
  rm neighbors/*
  pickle 293 o157.nwk |
	grep -v '^#' |
	while read a; do
	    ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
	done
  makeFurDb -t targets -n neighbors -d 300_293.db -o
  fur -d 300_293.db > 300_293.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length    Ns
  -------------  ---------  ------    --
  Subtraction_1        331  255255     0
  Intersection         108   33484   691
  Subtraction_2         15   13279  4863
\end{verbatim}

Now we compare 292 to the rest. We begin by preparing the targets and
remove the extra short genome.
#+end_export
#+begin_src sh <<query.sh>>=
  rm targets/*
  pickle 292 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/targets/$a
      done
  rm targets/tGCA_030908645.1_ASM3090864v1_genomic.fna
#+end_src
#+begin_export latex
And now the neighbors.
#+end_export
#+begin_src sh <<query.sh>>=
  rm neighbors/*
  pickle -c 292 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_export latex
We run \ty{makeFurDb} and \ty{fur} to find a very poor yield in
default mode, but with megablast mode there are 3.2 kb markers, of
which half a kb is \ty{N}s. That's a start.
#+end_export
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets -n neighbors -d 292.db
  fur -m -d 292.db > 292.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length   Ns
  -------------  ---------  ------   --
  Subtraction_1        218   78859    0
  Intersection         107   18743  852
  Subtraction_2         12    3188  555
\end{verbatim}
The next step in the design of diagnostic markers would be to
construct PCR primers based on \ty{292.fasta} and
\ty{300\_293.fasta}. We would then test \emph{in silico} the
specificity and sensitivity of the pair of primers in detecting
\emph{E. coli} O157:H7. Any primers from the \emph{in silico} work
would ultimately need to be tested in the lab.
#+end_export
