#+begin_src latex
  \section*{Introduction}
  The Neighbors package provides tools for finding the target and
  neighbor genomes used to identify regions that are ubiquitous in the
  targets and absent from the neighbors. These target regions are good
  starting material for constructing diagnostic markers. In this
  Tutorial I demonstrate the application of most of the ten programs in
  the Neighbors package listed in Table~\ref{tab:pro}. We begin by
  constructing a local relational database from the taxonomy and genome
  data supplied by the NCBI using the program \ty{makeNeiDb}. Then we
  query the database with \ty{taxid} to find the taxon-ID for our target
  organism, \emph{Leginoella pneumophila}, a bacterial pathogen that
  causes pneumonia in humans. The programs \ty{ants} and \ty{dree} allow
  us to explore the taxonomic context of our target organism. Based on
  the target taxon-ID, we carry out the search for target and neighbor
  genomes using \ty{neighbors}.

  Any genomes suggested by \ty{neighbors} are best subjected to
  phylogeny reconstruction before we extract marker candidates from
  them. The prerequisite phylogeny reconstruction is done with
  \ty{phylonium}\footnote{\ty{https://github.com/evolbioinf/phylonium}}. The
  resulting tree can be very large and its analysis is supported by four
  additional programs from the Neighbors package, \ty{land} for labeling
  the nodes in a phylogeny, \ty{pickle} for picking a particular clade
  in a phylogeny, \ty{fintac} for finding the target clade, and
  \ty{climt} for climbing the phylogeny from a given node. Once we have
  settled on the target and neighbor genomes, markers are extracted from
  them with \ty{fur}\footnote{\ty{https://github.com/evolbioinf/fur}}.

  I occasionally cite run times to give users an idea of how long a step
  may take. I made these measurements on a consumer laptop with 16 12th
  Gen Intel i7 CPUs and 32\,MB memory running WSL under Windows11.

  \section*{Construct Database}
  A dump of the current NCBI taxonomy database is posted as a tar ball at
  \begin{verbatim}
  <ftp>/<path1>/taxdump.tar.gz
  \end{verbatim}
  where \ty{ftp} is \ty{ftp.ncbi.nlm.nih.gov} and \ty{path1} is
  \ty{pub/taxonomy}.  The corresponding assembly reports for genbank and
  refseq are posted at
  \begin{verbatim}
  <ftp>/<path2>/assembly_summary_<source>.txt
  \end{verbatim}
  where \ty{path2} is \ty{genomes/ASSEMBLY\_REPORTS} and \ty{source} is
  either \ty{genbank} or \ty{refseq}.  The database dump and the
  assembly reports are updated regularly. To ensure the stability of
  this Tutorial, we use files downloaded on 28th April 2025:
#+end_src
#+begin_src sh <<db.sh>>=
  wget owncloud.gwdg.de/index.php/s/sNVcgHAkc1JHVPq/download \
       -O neidb_280425.tgz
#+end_src
#+begin_src latex
  We unpack the database files, delete the tar file, and change into the new
  directory \ty{neidb\_280425}.
#+end_src
#+begin_src sh <<db.sh>>=
  tar -xvzf neidb_280425.tgz
  cd neidb_280425
#+end_src
#+begin_src latex
  We can now construct the taxonomy database, \ty{neidb}, using
  \ty{makeNeiDb}. This takes less than a minute. Then we return to the
  parent directory and move the database \ty{neidb} there.
#+end_src
#+begin_src sh <<db.sh>>=
  makeNeiDb
  cd ../
  mv neidb_280425/neidb .
#+end_src
#+begin_src latex
  We don't need the files from which we built the database any more, so
  we delete them.
#+end_src
#+begin_src sh <<db.sh>>=
  rm -r neidb_280425*
#+end_src
#+begin_src latex
  \section*{Query Database}
  The next step is to find the taxon-IDs for our target organism,
  \emph{Legionella pneumophila}, the type strain of which is \emph{L.
  pneumophila subsp. pneumophila str. Philadelphia 1}. We look up its
  taxon-ID, 272624, using \ty{taxi} in substring mode (\ty{-s}). 
#+end_src
#+begin_src sh <<query.sh>>=
  taxi -s "Philadelphia 1" neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # ID      Parent  Name
    272624  91891   Legionella pneumophila...
  \end{verbatim}
  We can look at the ancestors of our type strain using \ty{ants}. This
  suggests that we should be targeting the subspecies
  \emph{pneumophila}, with taxon-ID 91891.
#+end_src
#+begin_src sh <<query.sh>>=
  ants 272624 neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Back  ID       Name                        Rank
    11    1        root                        no rank
    10    131567   cellular organisms          cellular root
    9     2        Bacteria                    domain
    8     3379134  Pseudomonadati              kingdom
    7     1224     Pseudomonadota              phylum
    6     1236     Gammaproteobacteria         class
    5     118969   Legionellales               order
    4     444      Legionellaceae              family
    3     445      Legionella                  genus
    2     446      Legionella pneumophila      species
    1     91891    Legionella pneumophila ...  subspecies
    0     272624   Legionella pneumophila ...  strain
  \end{verbatim}
  To get the neighbors of a given target, we visit its parent. So let's
  use the program \ty{dree} to draw the tree rooted on our target's
  parent, the tree for the species \emph{L. pneumophila} with taxon-ID
  446. The drawing returned by \ty{dree} is in dot notation. This can be
  rendered with the program \ty{dot}, which is part of the graphviz
  package available from most package repositories. The user can chose
  the format of the graphics generated by \ty{dree}, we use the Unix
  graphics format, x11.

  Figure~\ref{fig:446}A shows the result, where the nodes
  associated with one or more genome sequences are colored.
  \begin{figure}
    \newcommand{\scale}{0.2}
    \begin{center}
      \begin{tabular}{cc}
	\textbf{A} & \textbf{B}\\
	\scalebox{\scale}{\includegraphics{../tutorial/446}} &
	\scalebox{\scale}{\includegraphics{../tutorial/446g}}
      \end{tabular}
    \end{center}
    \caption{Complete taxonomy of \emph{Legionella pneumophila} with
      taxon-ID 446 (\textbf{A}), restricted to taxa with genome
      sequences (\textbf{B}).}\label{fig:446}
  \end{figure}
#+end_src
#+begin_src sh <<query.sh>>=
  dree 446 neidb | dot -T x11
#+end_src
#+begin_src latex
  By default, \ty{dree} labels nodes with taxon-IDs. We can change this
  to taxon names using the \ty{-n} option.
#+end_src
#+begin_src sh <<query.sh>>=
  dree -n 446 neidb | dot -T x11
#+end_src
#+begin_src latex
  If we are only interested in taxa with genomes, we rerun \ty{dree}
  with \ty{-g} to get Figure~\ref{fig:446}B, where the terminal white
  nodes of Figure~\ref{fig:446}A have been dropped.
#+end_src
#+begin_src sh <<query.sh>>=
  dree -g 446 neidb | dot -T x11
#+end_src
#+begin_src latex
  We can further restrict the output of \ty{dree} to genomes assembled
  to one or more of four possible assembly levels---complete,
  chromosome, scaffold, or contig---in that order of quality. Let's just
  show taxa with genomes assembled to levels complete or chromosome. The
  result is the much smaller tree in Figure~\ref{fig:446s}, where the
  three subspecies that make up \emph{L. pneumophila}, \emph{pascullei},
  \emph{pneumophila}, and \emph{fraseri}~\cite{bre88:leg} are marked
  with abbreviated subspecies names..
  \begin{figure}
    \begin{center}
      \scalebox{0.6}{\includegraphics{../tutorial/446gc}}
    \end{center}
    \caption{The taxonomy of \emph{Legionella pneumophila} restricted to
      taxa with genomes assembled to levels complete or chromosome;
      nominally, the species consists of three subspecies,
      \emph{pascullei} (\emph{pa}), \emph{pneumophila} (\emph{pn}), and
      \emph{fraseri} (\emph{fr}).}\label{fig:446s}
  \end{figure}
#+end_src
#+begin_src sh <<query.sh>>=
  dree -g -L complete,chromosome 446 neidb | dot -T x11
#+end_src
#+begin_src latex
  Instead of the mere presence of genomes marked by color in the
  taxonomic tree, we can list its individual nodes with the counts of
  the associated genomes. Some of these genome counts are quite large,
  starting with the 6,768 genomes associated with the species
  \emph{Legionella pneumophila}. The range of genome counts becomes
  particularly clear if we sort according to it.
#+end_src
#+begin_src sh <<query.sh>>=
  dree -n -g -l 446 neidb |
      tail -n +2 |
      sort -k 3 -n -r
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Taxid  Rank        Genomes  Name
  446      species     6768     L. p.
  66976    serogroup   777      L. p. serogroup 1
  91891    subspecies  432      L. p. subsp. pneumophila
  91892    subspecies  23       L. p. subsp. fraseri
  66977    serogroup   14       L. p. serogroup 2
  66978    serogroup   13       L. p. serogroup 3
  66983    serogroup   9        L. p. serogroup 8
  91890    subspecies  8        L. p. subsp. pascullei
  ...
  \end{verbatim}
#+end_src
#+begin_src latex
  We can again restrict the list to genomes assembled to levels complete
  or chromosome. Now there are 138 genomes available for the species
  \emph{L. pneumophila}, as shown in the first row of
  Table~\ref{tab:gen}. The remaining entries in that table refer to
  taxonomic levels below the species level, most notably the three
  subspecies we already singled out on the taxonomic tree,
  \emph{pneumophila} with 20 genomes, \emph{fraseri} with 9 genomes, and
  \emph{pascullei} with 6. However, the 20 genomes for subspecies
  \emph{pneumophila} do not contain the genomes in the five sequenced
  taxa below that subspecies, which are easy to see in the taxonomic
  tree in Figure~\ref{fig:446s}, and make up the five last lines in
  Table~\ref{tab:gen}. 

  \begin{table}
    \caption{The taxa of \emph{L. pneumophila} ordered by the number of
      high-quality sequenced genomes they contain.}\label{tab:gen}
    \begin{center}
      \resizebox{\textwidth}{!}{\input{../tutorial/gen}}
    \end{center}
  \end{table}
#+end_src
#+begin_src sh <<query.sh>>=
  dree -n -g -l -L complete,chromosome  446 neidb  |
      tail -n +2 |
      sort -k 3 -n -r
#+end_src
#+begin_src latex
  In summary, our target taxon has 25 genomes, its neighbors 22, a total
  of 47 genomes. This leaves the 138 genomes only classified to species
  level unaccounted for. They should belong to one of the three
  subspecies, but this classification beyond the species level has
  evidently not been made in these cases. To still use all
  \emph{L. pneumonia} genomes available, we carry out two analyses. In
  the first we analyze the 47 targets and neighbors at the subspecies
  level. We call this the ``small'' analysis to distinguish it from the
  subsequent ``large'' analysis that also includes the 138 species
  genomes.
  \section*{Small Analysis---Genomes in Subspecies Only}
  We begin by creating the directory \ty{small} and changing into it.
#+end_src
#+begin_src sh <<query.sh>>=
  mkdir small
  cd small
#+end_src
#+begin_src latex
  We use \ty{neighbors} to find the genomes for our target and its
  closest relatives, the \emph{neighbors}. We continue with genomes
  (\ty{-g}) assembled to level \emph{complete} or \emph{chromosome}
  (\ty{-L}).
#+end_src
#+begin_src sh <<query.sh>>=
  neighbors -L complete,chromosome -g -t 91891 ../neidb | less
#+end_src
#+begin_src latex
  \begin{verbatim}
  # MRCA(targets): 91891, Legionella pneumophila subsp. pneumophila
  # MRCA(targets+neighbors): 446, Legionella pneumophila
  # Type  Taxon-ID  Name                    Genomes
  t       91891     L. p....                GCF_000306845.1...
  tt      272624    L. p....                GCF_000008485.1
  ...
  n       91890     L. p. subsp. pascullei  GCF_001590615.2...
  n       91892     L. p. subsp. fraseri    GCF_001886795.1...
  ...
  \end{verbatim}

  I've edited the output of \ty{neighbors} above and throughout the rest
  of the tutorial to fit the printed page. The output begins with three
  hashed lines. The first states the most recent common ancestor of the
  targets, \emph{L. pneumophila subsp. pneumophila}, with taxon-ID
  91891. The second line states that the most recent common ancestor of
  the neighbors \emph{and} the targets is \emph{L. pneumophila}, taxon
  446. The third line is the header of the subsequent table, which
  consists of four columns, type, taxon-ID, name, and genomes. There are
  three possible types, ``t'' for known target, ``tt'' for new target,
  and ``n'' for neighbor.

  To download the target and neighbor genomes, we need the genome
  accessions. These are a bit tricky to extract from the current
  ``report view'' of the \ty{neighbors} results. So we use the ``list
  view'' instead. It consists of two columns, sample---t and n for
  target and neighbor, respectively---and accession.
#+end_src
#+begin_src sh <<query.sh>>=
  neighbors -L complete,chromosome -g -t 91891 -l ../neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Sample  Accession
  t         GCA_000277025.1
  t         GCA_000277065.1
  t         GCF_000008485.1
  ...
  n         GCA_001590645.1
  ...
  \end{verbatim}
#+end_src
#+begin_src latex
  We save the accessions to the file \ty{acc.txt}.
#+end_src
#+begin_src sh <<query.sh>>=
  neighbors -L complete,chromosome -g -t 91891 \
	    -l ../neidb > acc.txt
#+end_src
#+begin_src latex
  From our analysis of the taxonomy of \emph{L. pneumophila} with
  \ty{dree}, we expect 25 taxonomic targets and 22 taxonomic neighbors
  in \ty{acc.txt}, giving us a total of 47 genomes to analyze.
#+end_src
#+begin_src sh <<query.sh>>=
  grep -c '^t' acc.txt
  grep -c '^n' acc.txt
#+end_src
#+begin_src latex
  To download the genome sequences, we split the accessions into two
  files, \ty{tacc.txt} for the targets and \ty{nacc.txt} for the
  neighbors.
#+end_src
#+begin_src sh <<query.sh>>=
  grep '^t' acc.txt | awk '{print $2}' > tacc.txt
  grep '^n' acc.txt | awk '{print $2}' > nacc.txt
#+end_src
#+begin_src latex
  We use the program
  \ty{datasets}\footnote{\ty{https://www.ncbi.nlm.nih.gov/datasets/}}
  provided by the NCBI to download the genomes. We exclude genomes
  flagged as ``atypical'' and download the genomes in ``dehydrated''
  form, starting with the targets, which we save in \ty{tdata.zip}. We
  get 23 genomes, which means 2 of our 25 target accessions were flagged
  as ``atypical''.
#+end_src
#+begin_src sh <<query.sh>>=
  datasets download genome accession \
	   --inputfile tacc.txt \
	   --exclude-atypical \
	   --dehydrated \
	   --filename tdata.zip
#+end_src
#+begin_src latex
  We repeat the download for the neighbor genomes, which we save in
  \ty{ndata.zip}. None of our 22 neighbor accessions refer to an
  atypical genome. So our ``small'' analysis will comprise a total of
  $23+22=45$ genomes.
#+end_src
#+begin_src sh <<query.sh>>=
  datasets download genome accession \
	   --inputfile nacc.txt \
	   --exclude-atypical \
	   --dehydrated \
	   --filename ndata.zip
#+end_src
#+begin_src latex
  We unzip the targets into the directory \ty{tdata}.
#+end_src
#+begin_src sh <<query.sh>>=
  unzip tdata.zip -d tdata
#+end_src
#+begin_src latex
We unzip the neighbors into the directory \ty{ndata}.
#+end_src
#+begin_src sh <<query.sh>>=
  unzip ndata.zip -d ndata
#+end_src
#+begin_src latex
We rehydrate the 23 target genomes.
#+end_src
#+begin_src sh <<query.sh>>=
  datasets rehydrate --directory tdata
#+end_src
#+begin_src latex
We rehydrate the 22 neighbor genomes.
#+end_src
#+begin_src sh <<query.sh>>=
  datasets rehydrate --directory ndata
#+end_src
#+begin_src latex
  For easier handling, we move all 45 genomes into a new directory,
  \ty{all}. We begin with the targets. To help us later divide the data
  into true, i. e. phylogenetic, targets and neighbors, we give target
  genomes the prefix \ty{t}.
#+end_src
#+begin_src sh <<query.sh>>=
  mkdir all
  for a in tdata/ncbi_dataset/data/*/*.fna
  do
      b=$(basename $a)
      mv $a all/t$b
  done
#+end_src
#+begin_src latex
We also move the neighbor genomes into \ty{all} and mark their names
with prefix \ty{n}.
#+end_src
#+begin_src sh <<query.sh>>=
  for a in ndata/ncbi_dataset/data/*/*.fna
  do
      b=$(basename $a)
      mv $a all/n$b
  done
#+end_src
#+begin_src latex
  We've now got the taxonomic targets and neighbors united in directory
  \ty{all}, but distinguishable by their prefixes t or n. Our next task
  is to extract from this data the phylogenetic---as opposed to
  taxonomic---targets and neighbors. We do this by calculating a
  distance-based phylogeny from all genomes. We calculate the requisite
  distances using the program
  \ty{phylonium}\footnote{\ty{https://github.com/evolbioinf/phylonium}}
  and save them in \ty{lpn.dist}. This takes about 4\,s.
#+end_src
#+begin_src sh <<query.sh>>=
  phylonium all/* > lpn.dist
#+end_src
#+begin_src latex
  We convert the distances to a neighbor-joining tree with \ty{nj} and
  midpoint root it with \ty{midRoot}. Both programs are part of the
  biobox\footnote{\ty{https://github.com/evolbioinf/biobox}}. Then we
  label the internal nodes of the phylogeny with \ty{land}, which is
  part of Neighbors, and save the final tree in \ty{lpn.nwk}.
#+end_src
#+begin_src sh <<query.sh>>=
  nj lpn.dist | midRoot | land > lpn.nwk
#+end_src
#+begin_src latex
  The tree in \ty{lpn.nwk} is in the popular Newick format for
  phylogenies\footnote{\ty{https://phylipweb.github.io/phylip/newick\_doc.html}},
  and you can render it with your favorite tree plotting program. One
  example of such a program is \ty{plotTree} from the biobox. At this
  point, the taxon names consist of prefix t or n followed by accession
  numbers. These are a bit tedious to read, so we remove them to just
  leave the single-character prefix before plotting the
  tree to give Figure~\ref{fig:lpn}.
  \begin{figure}
    \begin{center}
      \includegraphics{../tutorial/lpn}
    \end{center}
    \caption{The phylogeny of 45 genomes of \emph{L. pneumophila}
      highlighting taxonomic targets (\emph{t}) and neighbors
      (\emph{n}).}\label{fig:lpn}
  \end{figure}
#+end_src
#+begin_src sh <<query.sh>>=
  sed -E 's/([nt])[^f]*fna/\1/g' lpn.nwk |
      plotTree
#+end_src
#+begin_src latex
  We can see in Figure~\ref{fig:lpn} that the target clade, node 16, has
  a number of taxonomic neighbors sprinkled in. We can count these seven
  taxonomic neighbors using the program \ty{pickle} (Neighbors).
#+end_src
#+begin_src sh <<query.sh>>=
  pickle 16 lpn.nwk |
      grep -c '^n'
#+end_src
#+begin_src latex
  To count the targets outside of clade 16, we pick everything but clade
  16 by using the complement switch of \ty{pickle}, \ty{-c}. There are
  no taxonomic targets outside clade 16.
#+end_src
#+begin_src sh <<query.sh>>=
  pickle -c 16 lpn.nwk |
      grep -c '^t'
#+end_src
#+begin_export latex
We follow the phylogeny and call everything inside clade 16 a
target. In Figure~\ref{fig:lpn} it is easy to pick the target clade by
eye. However, in densely sequenced taxa the number of targets and
neighbors can be so large as to render the resulting tree
illegible. In such a situation we can find the target clade using the
program \ty{fintac} (Neighbors). As expected, it picks clade 16 from
our example tree, and reports that this clade contains all 23
taxonomic targets and 7 taxonomic neighbors. According to
equation~(\ref{eq:spl}), this leads to a split of
\[
s(v)=\frac{23+22-7}{45}\times 100\approx 84\,\%.
\]
The parent of node 16 is node 1, the root. The branch connecting node
16 to the root has length 0.025, one of the longer branches in
Figure~\ref{fig:lpn}.
#+end_export
#+begin_src sh <<query.sh>>=
  fintac lpn.nwk
#+end_src
#+begin_src latex
  \begin{verbatim}
  #Clade  Targets  Neighbors  Split (%)  Parent  Dist(Parent)
  16      23       7          84.4       1       0.0246
  \end{verbatim}
#+end_src
#+begin_src latex
  We begin our search for markers by splitting our genomes into targets,
  i. e. clade 16, and neighbors, the rest. To separate the targets, we
  make a directory, \ty{targets}. Then we use \ty{pickle} in default
  mode to list the taxa in the target clade. For each genome we create a
  symbolic link to the original data.
#+end_src
#+begin_src sh <<query.sh>>=
  mkdir targets
  pickle 16 lpn.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/targets/$a
      done
#+end_src
#+begin_src latex
  Similarly, we pick the neighbors as the complement of the targets and
  store them as symbolic links in directory \ty{neighbors}.
#+end_src
#+begin_src sh <<query.sh>>=
  mkdir neighbors
  pickle -c 16 lpn.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_src latex
  In preparation to running \ty{fur}, we make its database with
  \ty{makeFurDb}, which takes 17\,s.
#+end_src
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets/ -n neighbors/ -d lpn.db
#+end_src
#+begin_src latex
  We apply \ty{fur} to the database, which takes nine seconds and
  returns 24 fragments totalling 9.1\,kb marker candidates with 0.7\,kb
  \ty{N}s. We save the potential markers in the file \ty{lpn.fasta}.
#+end_src
#+begin_src sh <<query.sh>>=
  fur -d lpn.db > lpn.fasta
#+end_src
#+begin_src latex
  \begin{verbatim}
    Step           Sequences   Length     Ns
    -------------  ---------   ------     --
    Subtraction_1       4618  1222475      0
    Intersection        2463   484251  30902
    Subtraction_2         24     9085    704
  \end{verbatim}
#+end_src
#+begin_src latex
  \section*{Large Analysis---All \emph{L. pneumophila} Genomes}
  As we already noticed at the beginning of this tutorial,
  Table~\ref{tab:gen} contains 138 genomes only associated with the
  species \emph{L. pneumophila}. In other words, there are three times
  more genomes than the 45 we analyzed so far still awaiting
  analysis. And while they haven't been classified among the three
  subspecies, perhaps we can still make use of them. So our plan is to
  add these 138 genomes as ``unknown'' to the analysis in the hope that
  the distribution of known taxonomic targets and neighbors will allow
  us to also divide the unknowns into targets of neighbors, thus making
  use of all data available.

  We begin by changing into the parent directory. Then we make directory
  \ty{large} and change into it.
#+end_src
#+begin_src sh <<query.sh>>=
  cd ../
  mkdir large
  cd large
#+end_src
#+begin_src latex
  We run \ty{neighbors} using as target the species
  \emph{L. pneumophila}, taxon-ID 446. We save the unknown accessions in
  \ty{uacc.txt}.
#+end_src
#+begin_src sh <<query.sh>>=
  neighbors -t 446 -l -L complete,chromosome ../neidb |
      grep '^t' |
      awk '{print $2}' > uacc.txt
#+end_src
#+begin_src latex
  The program  \ty{neighbors} returns  the accessions of  all qualifying
  genomes in the taxonomy rooted on a given taxon. So we expect
  \ty{uacc.txt} to contain the 138 accessions associated with taxon 446
  plus the 47 target and neighbor accessions already analyzed, yielding
  a total of 185 accessions.
#+end_src
#+begin_src sh <<query.sh>>=
  wc -l uacc.txt
#+end_src
#+begin_src latex
  We subtract the 25 taxonomic target accessions in \ty{tacc.txt} from
  \ty{uacc.txt} and make sure we retain $185-25=160$ accessions.
#+end_src
#+begin_src sh <<query.sh>>=
  grep -v -f ../small/tacc.txt uacc.txt > tmp.txt
  mv tmp.txt uacc.txt
  wc -l uacc.txt
#+end_src
#+begin_src latex
  We subtract the 22 taxonomic neighbor accessions in \ty{nacc.txt} from
  \ty{uacc.txt} and make sure we retain $160-22=138$ accessions, the 138
  accessions listed for taxon 446 in Table~\ref{tab:gen}.
#+end_src
#+begin_src sh <<query.sh>>=
  grep -v -f ../small/nacc.txt uacc.txt > tmp.txt
  mv tmp.txt uacc.txt
  wc -l uacc.txt
#+end_src
#+begin_src latex
  We download the unknown accessions in dehydrated form and excluding
  atypical genomes. We get a full complement of 138 dehydrated genomes,
  so none of our accessions refers to an atypical genome. We save these
  genomes in \ty{udata.zip}.
#+end_src
#+begin_src sh <<query.sh>>=
  datasets download genome accession\
	   --inputfile uacc.txt \
	   --exclude-atypical \
	   --dehydrated \
	   --filename udata.zip
#+end_src
#+begin_src latex
  We unzip the unknown genomes into the directory \ty{udata}.
#+end_src
#+begin_src sh <<query.sh>>=
  unzip udata.zip -d udata
#+end_src
#+begin_src latex
  We rehydrate the genomes.
#+end_src
#+begin_src sh <<query.sh>>=
  datasets rehydrate --directory udata
#+end_src
#+begin_src latex
  We link the directory \ty{all} from the small analysis, move the
  unknown genomes into it, and mark them with prefix u.
#+end_src
#+begin_src sh <<query.sh>>=
  ln -s ../small/all .
  for a in udata/ncbi_dataset/data/*/*.fna
  do
      b=$(basename $a)
      mv $a all/u$b
  done
#+end_src
#+begin_src latex
  We make sure directory \ty{all} contains the expected 183 genomes.
#+end_src
#+begin_src sh <<query.sh>>=
  ls all | wc -l
#+end_src
#+begin_src latex
  We calculate the pairwise distances between the genomes and save them
  in \ty{lpn.dist}. This takes 14\,s.
#+end_src
#+begin_src sh <<query.sh>>=
  phylonium all/*.fna > lpn.dist
#+end_src
#+begin_src latex
  We convert the distances into a neighbor-joining tree, midpoint root
  it, and label its nodes. Then we saved the tree in file \ty{lpn.nwk}.
#+end_src
#+begin_src sh <<query.sh>>=
  nj lpn.dist |
      midRoot |
      land > lpn.nwk
#+end_src
#+begin_src latex
  In our tree the targets should be rooted on the node that maximizes
  the number of taxonomic targets inside and the number of taxonomic
  neighbors outside while ignoring the unknowns. We could try looking
  for this manually, but this is difficult as our tree contains 183
  taxa. Instead, we run \ty{fintac} specifying prefix n as the target
  mark and ignoring the messages that warn about taxa that are neither
  target nor neighbor. This returns the same 84\,\% split as before,
  with an almost identical branch length to the parent, 0.025. This is
  reassuring. Our target clade in the large tree is labeled 25.
#+end_src
#+begin_src sh <<query.sh>>=
  fintac -n "^n" lpn.nwk
#+end_src
#+begin_src latex
  \begin{verbatim}
  #Clade  Targets  Neighbors  Split (%)  Parent  Dist(Parent)
  25      23       7          84.4       1       0.0247
  \end{verbatim}
  Sprinkled among the taxonomic targets and neighbors are unknowns. To
  find out how many, we count the 129 unknowns among the targets.
#+end_src
#+begin_src sh <<query.sh>>=
  pickle 25 lpn.nwk |
      grep -c '^u'
#+end_src
#+begin_src latex
  Similarly, we count the 9 unknowns among the complement of the
  targets, the neighbors.
#+end_src
#+begin_src sh <<query.sh>>=
  pickle -c 25 lpn.nwk |
      grep -c '^u'
#+end_src
#+begin_export latex
So we create a directory, \ty{targets}, and link the 129 target
genomes in clade 25.
#+end_export
#+begin_src sh <<query.sh>>=
  mkdir targets
  pickle 25 lpn.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/targets/$a
      done
#+end_src
#+begin_src latex
  We do the same with the neighbors, which are all the taxa outside
  of node 25.
#+end_src
#+begin_src sh <<query.sh>>=
  mkdir neighbors
  pickle -c 25 lpn.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_src latex
  We count the 159 targets and 24 neighbors, which sum to the
  expected 183 taxa in our analysis.
#+end_src
#+begin_src sh <<query.sh>>=
  ls targets/ | wc -l
  ls neighbors/ | wc -l
#+end_src
#+begin_src latex
  We use \ty{makeFurDb} to construct the Fur database, \ty{lpn.db},
  which takes 24\,s.
#+end_src
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets/ -n neighbors/ -d lpn.db
#+end_src
#+begin_src latex
    We extract the markers from the database, which takes 22\,s and
    yields 24 fragments totalling 6.4\,kb of putative marker material with
    523 \ty{N}s.
#+end_src
#+begin_src sh <<query.sh>>=
  fur -d lpn.db > lpn.fasta
#+end_src
#+begin_src latex
  \begin{verbatim}
    Step           Sequences   Length     Ns
    -------------  ---------   ------     --
    Subtraction_1       4007  1366354      0
    Intersection        2644   605877  40606
    Subtraction_2         24     6415    523
  \end{verbatim}

  As summarized in Table~\ref{tab:sum}, by including the 138 species
  genomes, we expanded the target set from 30 genomes to 159 genomes and
  the neighbor set from 15 to 24 genomes. Markers are found by
  subtracting the neighbors from one target and intersecting the result
  with all other targets~\cite{vie24:mar}. This means that an increase
  in the number of genomes analyzed, irrespective of whether they are
  targets or neighbors, can never lead to an increase in marker
  material. Instead, we usually observe a decrease. Still, in spite of
  our increase in size of the target and neighbor set, we ended up with
  6.4\,kb candidate sequences, plenty for marker construction.

  \begin{table}
    \caption{Summary of ``small'' and ``large'' analysis of diagnostic
      markers in \emph{L. pneumophila}.}\label{tab:sum}
    \begin{center}
      \begin{tabular}{lrrr}
	\hline
	Sample & Targets & Neighbors & Yield (kb)\\\hline
	small & 38 & 15 & 9.1\\
	large & 159 & 24 & 6.4\\\hline
      \end{tabular}
    \end{center}
  \end{table}

  The next steps in the design of diagnostic markers would be to make
  PCR primers based on \ty{lpn.fasta}. We would then test \emph{in
  silico} the specificity and sensitivity of these primers. The package
  Prim\footnote{github.com/evolbioinf/prim} contains programs for primer
  construction and assessment. Any primers derived from this \emph{in
  silico} work would ultimately need to be tested \emph{in vitro} to
  make sure they are diagnostic for \emph{L. pneumophila
  subsp. pneumophila}.
#+end_src
