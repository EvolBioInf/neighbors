#+begin_src latex
  \section*{Introduction}
  The Neighbors package provides tools for finding the target and
  neighbor genomes that can then be used to find regions unique to the
  targets. These unique target regions are a good starting point for
  constructing diagnostic markers. In this Tutorial I demonstrate the
  application of the eight programs in the Neighbors package. We begin
  by constructing a relational database from the NCBI taxonomy data
  using the program \ty{makeNeiDb}. Then we query the database with
  \ty{taxid} to find the taxon-ID for our target organism. The programs
  \ty{ants} and \ty{dree} allow us to explore the taxonomic context of
  our target organism. Based on the target taxon-ID, we carry out the
  search for target and neighbor genomes using \ty{neighbors}.

  Any genomes suggested by \ty{neighbors} are best subjected to
  phylogeny reconstruction before we extract marker candidates from
  them. The prerequisite phylogeny reconstruction is supported by two
  additional programs from the Neighbors package, \ty{land} for labeling
  the nodes in a phylogeny, and \ty{pickle} for picking a particular
  clade in a phylogeny. Finally, we use \ty{findMacs} to find marker
  candidates.

  \section*{Construct Database}
  The NCBI taxonomy database and the corresponding genome reports are
  posted at
#+end_src
#+begin_src sh <<db.sh>>=
  ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/prokaryotes.txt
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/viruses.txt
#+end_src
#+begin_src latex
  These four files are updated regularly. To ensure the stability of
  this Tutorial, we use files downloaded on 14. September 2022:
#+end_src
#+begin_src sh <<db.sh>>=
  wget guanine.evolbio.mpg.de/neighbors/neidb.tgz
#+end_src
#+begin_src latex
  We unpack the database files, delete the tar file, change into the new
  directory \ty{neidb}, and unpack the database dump.
#+end_src
#+begin_src sh <<db.sh>>=
  tar -xvzf neidb.tgz
  rm neidb.tgz
  cd neidb
  tar -xvzf taxdump.tar.gz
#+end_src
#+begin_src latex
  We can now construct the taxonomy database, \ty{neidb}, using
  \ty{makeNeiDb}. This takes approximately 17s. Then we return to the
  parent directory and move the database \ty{neidb} there. Since the
  database has the same name as the directory that contains it, we first
  move the database to \ty{tmpdb}, remove the download directory, and
  move \ty{tmpdb} to \ty{neidb}.
#+end_src
#+begin_src sh <<db.sh>>=
  makeNeiDb
  cd ../
  mv neidb/neidb tmpdb
  rm -r neidb
  mv tmpdb neidb
#+end_src
#+begin_src latex
  \section*{Query Database}
  The next step is to find the taxon-IDs for one or more target
  organisms. Say, our target organism is the bactrium \emph{Aerococcus
  urinae}, which causes urinary tract infections. We look up its
  taxon-ID using \ty{taxi}.
#+end_src
#+begin_src sh <<query.sh>>=
  taxi "Aerococcus urinae" neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # ID    Parent  Name
    1376  1375    Aerococcus urinae
  \end{verbatim}
  This tells us that \emph{Aerococcus urinae} has taxon-ID 1376
  and its parent has taxon-ID 1375. If we are interested in the wider
  taxonomic context of \emph{A. urinae}, we can look up all its
  ancestors with \ty{ants} to find that \emph{A. urinae} belongs to the
  Firmicutes.
#+end_src
#+begin_src sh <<query.sh>>=
  ants 1376 neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Back  ID       Name
    9     1        root
    8     131567   cellular organisms
    7     2        Bacteria
    6     1783272  Terrabacteria group
    5     1239     Firmicutes
    4     91061    Bacilli
    3     186826   Lactobacillales
    2     186827   Aerococcaceae
    1     1375     Aerococcus
    0     1376     Aerococcus urinae
  \end{verbatim}
#+end_src
#+begin_export latex
We can draw the tree rooted on \emph{Aerococcus}.
#+end_export
#+begin_src sh <<query.sh>>=
  dree 1375 neidb | dot -T x11
#+end_src
#+begin_src latex
  Unfortunately, this tree is so large, it's illegible and when we zoom
  in, navigating the image becomes difficult. So instead of piping it to
  an X11 window, we save it to file and render this file with a tool
  that allows easy navigation, e. g. \ty{eog}.
#+end_src
#+begin_src sh <<query.sh>>=
  dree 1375 neidb | dot -T svg > tmp.svg
  eog tmp.svg &
#+end_src
#+begin_export latex
Still, there are too many nodes in this tree for convenient
viewing. So we restrict it to the clades with sequenced genomes and
get Figure~\ref{fig:au1}, where taxa with sequenced genomes are
colored.
#+end_export
#+begin_src sh <<query.sh>>=
  dree -g 1375 neidb | dot -T x11
#+end_src
#+begin_src latex
  \begin{figure}
    \begin{center}
      \resizebox{\textwidth}{!}{\includegraphics{../tutorial/1375_t_g.ps}}
    \end{center}
    \caption{The taxonomy of \emph{Aerococcus} (1375) restricted to taxa
      with sequenced genomes, which are shown as colored
      nodes.}\label{fig:au1}
  \end{figure}
  Since taxon-IDs are difficult to interpret, we convert them to taxon
  names in Figure~\ref{fig:au2}.
#+end_src
#+begin_src sh <<query.sh>>=
  dree -n -g 1375 neidb | dot -T x11
#+end_src
#+begin_src latex
  \begin{figure}
    \begin{center}
      \resizebox{\textwidth}{!}{\includegraphics{../tutorial/1375_n_g.ps}}
    \end{center}
    \caption{The taxonomy tree of \emph{Aerococcus} with sequenced
      genomes and taxon names.}\label{fig:au2}
  \end{figure}
  Now we search for the neighbors of \emph{Aerococcus}.
#+end_src
#+begin_src sh <<query.sh>>=
  printf "1376" | neighbors -g neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # MRCA(targets): 1376, Aerococcus urinae
  # MRCA(targets+neighbors): 1375, Aerococcus
  # Type  Taxon-ID  Name                      Genomes
  # MRCA(targets): 1376, Aerococcus urinae
  # MRCA(targets+neighbors): 1375, Aerococcus
  # Type  Taxon-ID  Name                      Genomes
  t       1376      Aerococcus urinae         NZ_CP014161.1|...
  tt      866775    Aerococcus urinae...      NC_015278.1
  n       1377      Aerococcus viridans       NZ_CP014164.1
  n       51665     Aerococcus urinaeequi     NZ_CP013988.1|...
  n       87541     Aerococcus christensenii  NZ_CP014159.1
  n       119206    Aerococcus sanguinicola   NZ_CP014160.1
  n       128944    Aerococcus urinaehominis  NZ_CP014163.1
  \end{verbatim}
  I've slightly edited the output of \ty{neighbors} for clarity. It
  begins with three hashed lines. The first states the most recent
  common ancestor of the targets, \emph{A. urinae}, with taxon-ID
  1376. The second line states the most recent common ancestor of the
  neighbors and the targets, \emph{Aerococcus}, with taxon-ID 1375. The
  third line is the header of the subsequent table, which consists of
  four columns, type, taxon-ID, name, and genomes. There are three
  possible types, ``t'' for known target, ``tt'' for new target, and
  ``n'' for neighbor. We see the new target 866775, which was already in
  Figure~\ref{fig:au1}, but wasn't contained in our query.

  For downloading the targets and neighbors, we need the genome
  accessions. These are a bit difficult to extract from the ``report
  view'' of the results we just looked at. So we use the ``list view
  instead''. It consists of three columns, sample (target or neighbor),
  the name of the replicon, and its accession.
#+end_src
#+begin_src sh <<query.sh>>=
  printf "1376" | neighbors -l neidb
#+end_src
#+begin_export latex
\begin{verbatim}
# Sample  Name            Accession
t         chromosome      NZ_CP014161.1
t         chromosome      NZ_CP065662.1
t         chromosome      NC_015278.1
n         chromosome      NZ_CP014164.1
n         chromosome      NZ_CP014160.1
n         chromosome      NZ_CP014159.1
n         chromosome      NZ_CP014163.1
n         chromosome      NZ_CP013988.1
n         chromosome      NZ_CP014162.1
n         chromosome      NZ_CP063065.1
n         plasmid_pT4302  NZ_CP063066.1
n         plasmid_pT4303  NZ_CP063067.1
\end{verbatim}
#+end_export
#+begin_export latex
To prepare the sequence download, we make directories for the targets
and neighbors. We also save the accessions in the file \ty{acc.txt}.
#+end_export
#+begin_src sh <<query.sh>>=
  mkdir targets neighbors
  printf "1376" | neighbors -l neidb > acc.txt
#+end_src
#+begin_export latex
We extract the target accessions, download the corresponding genomes
in FASTA format, and store them in the \ty{targets} directory. As
names for the sequence files we use the accessions prefixed by \ty{t}.
#+end_export
#+begin_src sh <<query.sh>>=
  grep '^t' acc.txt |
      awk '{print $3}' |
      while read a
      do
	  echo $a
	  efetch -db nucleotide -id ${a} \
		 -format fasta > targets/t${a}.fasta
      done
#+end_src
#+begin_src latex
  Among the neighbor genomes we ignore plasmid sequences. This time we
  prefix the file names by \ty{n}.
#+end_src
#+begin_src sh <<query.sh>>=
      grep '^n' acc.txt |
      grep -v plasmid |
      awk '{print $3}' |
      while read a
      do
	  echo $a
	  efetch -db nucleotide -id ${a} \
		 -format fasta > neighbors/n${a}.fasta
      done
#+end_src
#+begin_src latex
  We compute a quick phylogeny for the target and neighbor genomes using
  \ty{phylonium}\footnote{\ty{github.com/evolbioinf/phylonium}} and
  programs form the
  \ty{biobox}\footnote{\ty{github.com/evolbioinf/biobox}}. The taxon
  names in the tree are the file names minus the \ty{.fasta}
  extensions. These file names contain underscores, e. g.
  \begin{center}
    \ty{tNC\_015278.1.fasta}
  \end{center}
  When rendering the tree, characters preceded by underscores are
  interpreted as subscripts.
#+end_src
#+begin_src sh <<query.sh>>=
  phylonium targets/* neighbors/* | nj | midRoot > au.nwk
  plotTree au.nwk
#+end_src
#+begin_export latex
To avoid the subscripts in the leaf names, we remove the
underscores. The resulting tree in Figure~\ref{fig:auTree} shows that
the targets are monophyletic, which is necessary for successful marker
discovery.
\begin{figure}
  \begin{center}
    \scalebox{1}{\includegraphics{../tutorial/au}}
  \end{center}
  \caption{Phylogeny of target and neighbor genomes; targets are
    prefixed ``t'', neighbors ``n''.}\label{fig:auTree}
\end{figure}
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/_//g' au.nwk > au2.nwk
  plotTree au2.nwk
#+end_src
#+begin_src latex
  There's a published program for finding marker candidates,
  \ty{fur}\footnote{\ty{github.com/evolbioinf/fur}}, but Neighbors comes
  with its own script for doing that, \ty{findMacs}. The output of
  \ty{findMacs} consists of intervals on the target representative,
  which we save to the file \ty{macs1.out}.
#+end_src
#+begin_src sh <<query.sh>>=
  findMacs targets neighbors > macs1.out
#+end_src
#+begin_export latex
We calculate the amount of marker material by summing the interval
lengths, 1.18 Mb.
#+end_export
#+begin_src sh <<query.sh>>=
  awk '{s+=$3-$2+1}END{print s}' macs1.out
#+end_src
#+begin_export latex
How specific are the markers? To really find out, we'd need to test
them against a comprehensive sequence database and measure the true
negative rate as the fraction of non-targets classified as
non-targets. Here we restrict ourselves to the question, how much of
the marker material is found in the neighbors, after all?  For this we
extract the intervals identified by \ty{findMacs}, cut the marker
candidates from the target representative, convert the neighbor
sequences into a Blast database, and compare the candidates to the
database. We recover 2.2 kb, a tiny fraction, so specificity looks
good.
#+end_export
#+begin_src sh <<query.sh>>=
  awk '{print $2, $3}'  macs1.out > iv.txt
  cutSeq  -f iv.txt targets/tNC_015278.1.fasta > frag.fasta
  cat neighbors/*.fasta > nei.fasta
  makeblastdb -in nei.fasta -out nei -dbtype nucl
  blastn -query frag.fasta -db nei -outfmt 6 |
      awk '{s+=$4}END{print s}'
#+end_src
#+begin_export latex
Next, we look at the sensitivity of our markers. Again, to really find
out, we'd have to compare them to a comprehensive sequence database
and measure the true positive rate as the fraction of targets
classified as targets. Here we restrict ourselves to asking how much
of the marker material is found in the targets. It turns out, 1.21 Mb
in the representative NC\_015278, which is roughly three percent more
than the 1.18 Mb we expect, and 1.18 Mb in the other targets. So
again, sensitivity looks good.
#+end_export
#+begin_src sh <<query.sh>>=
  cat targets/*.fasta > tar.fasta
  makeblastdb -in tar.fasta -out tar -dbtype nucl
  blastn -query frag.fasta -db tar -outfmt 6 |
      awk '{c[$2]+=$4}END{for(a in c)print a, c[a]}'
#+end_src
#+begin_src latex
  If we return to the phylogeny in Figure~\ref{fig:auTree}, we might
  want to rethink the position of NC015278. Perhaps it should be a
  neighbor rather than a target? This of course depends on the details
  of our test system. But let's say we make NC015278 a neighbor; then
  our set of potential markers shrinks to 433.4 kb.
#+end_src
#+begin_src sh <<query.sh>>=
  mv targets/tNC_015278.1.fasta neighbors/
  findMacs targets neighbors > macs2.out
  awk '{s+=$3-$2+1}END{print s}' macs2.out
#+end_src
#+begin_src latex
  We might extend this analysis by making NC015278 the target and
  everything else the neighors. This returns 496.9 kb marker material.
#+end_src
#+begin_src sh <<query.sh>>=
  mv targets/* neighbors/
  mv neighbors/tNC_015278.1.fasta targets/
  findMacs targets/ neighbors/ > macs3.out
  awk '{s+=$3-$2+1}END{print s}' macs3.out
#+end_src
#+begin_src latex
  \subsection*{Pick Clades from Phylogeny}
  Sometimes a tree of genomes is very large, making it inconvenient to
  manually list the taxa that belong to a particular clade. This isn't
  an issue in our analysis (Figure~\ref{fig:auTree}), but if it were, we
  could use the programs \ty{land} and \ty{pickle} to first label and
  then pick individual clades. \ty{land} labels the nodes in a tree,
  yielding Figure~\ref{fig:auTree2}.
  \begin{figure}
    \begin{center}
      \scalebox{1}{\includegraphics{../tutorial/au2}}
    \end{center}
    \caption{Phylogeny of target and neighbor genomes with internal
      nodes, or \emph{clades}, labeled.}\label{fig:auTree2}
  \end{figure}
#+end_src
#+begin_src sh <<query.sh>>=
  land au2.nwk > au3.nwk
  plotTree au3.nwk
#+end_src
#+begin_src latex
  Now we can pick a clade, say clade 7, and print its five leaf labels
  with \ty{pickle}.
#+end_src
#+begin_src sh <<query.sh>>=
  pickle 7 au3.nwk
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Selected clades
  ## 7
  nNZCP014163.1
  nNZCP063065.1
  nNZCP014164.1
  nNZCP013988.1
  nNZCP014162.1
  \end{verbatim}
#+end_src
