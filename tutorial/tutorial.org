#+begin_src latex
  \section*{Introduction}
  The Neighbors package provides tools for finding the target and
  neighbor genomes used to identify regions that are ubiquitous in the
  targets and absent from the neighbors. These target regions are a good
  starting point for constructing diagnostic markers. In this Tutorial I
  demonstrate the application of the seven programs in the Neighbors
  package in the context of marker discovery. We begin by constructing a
  local relational database from the NCBI taxonomy using the program
  \ty{makeNeiDb}. Then we query the database with \ty{taxid} to find the
  taxon-ID for our target organism, serotype O157:H7 of
  \emph{Escherichia coli}. The programs \ty{ants} and \ty{dree} allow us
  to explore the taxonomic context of our target organism. Based on the
  target taxon-ID, we carry out the search for target and neighbor
  genomes using \ty{neighbors}.

  Any genomes suggested by \ty{neighbors} are best subjected to
  phylogeny reconstruction before we extract marker candidates from
  them. The prerequisite phylogeny reconstruction is done with
  \ty{phylonium}\footnote{\ty{https://github.com/evolbioinf/phylonium}}. The
  resulting tree can be very large and its analysis is supported by two
  additional programs from the Neighbors package, \ty{land} for labeling
  the nodes in a phylogeny, and \ty{pickle} for picking a particular
  clade in a phylogeny. Actual marker discovery is done with
  \ty{fur}\footnote{\ty{https://github.com/evolbioinf/fur}}.

  \section*{Construct Database}
  A dump of the current NCBI taxonomy database is posted as a tar ball at
  \begin{verbatim}
  ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz
  \end{verbatim}
  The corresponding genome reports for prokaryotes, eukaryotes, and
  viruses are posted at
  \begin{verbatim}
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/prokaryotes.txt
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt
  ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/viruses.txt
  \end{verbatim}
#+end_src
#+begin_src latex
  The database dump and the genome reports are updated regularly. To
  ensure the stability of this Tutorial, we use files downloaded on
  14. September 2022:
#+end_src
#+begin_src sh <<db.sh>>=
  wget guanine.evolbio.mpg.de/neighbors/neidb.tgz
#+end_src
#+begin_src latex
  We unpack the database files, delete the tar file, change into the new
  directory \ty{neidb}, and unpack the database dump.
#+end_src
#+begin_src sh <<db.sh>>=
  tar -xvzf neidb.tgz
  rm neidb.tgz
  cd neidb
  tar -xvzf taxdump.tar.gz
#+end_src
#+begin_src latex
  We can now construct the taxonomy database, \ty{neidb}, using
  \ty{makeNeiDb}. This takes approximately 17s. Then we return to the
  parent directory and move the database \ty{neidb} there. Since the
  database has the same name as the directory that contains it, we first
  move the database to \ty{tmpdb}, remove the download directory, and
  move \ty{tmpdb} to \ty{neidb}.
#+end_src
#+begin_src sh <<db.sh>>=
  makeNeiDb
  cd ../
  mv neidb/neidb tmpdb
  rm -r neidb
  mv tmpdb neidb
#+end_src
#+begin_src latex
  \section*{Query Database}
  The next step is to find the taxon-IDs for one or more target
  organisms. Our target organism is the bactrium \emph{E. coli}
  O157:H7, a cause of severe diarrhea in humans. We look up its
  taxon-ID using \ty{taxi} in substring mode (\ty{-s}). For each taxon
  we get the ID, the parent ID, and the name.
#+end_src
#+begin_src sh <<query.sh>>=
  taxi -s "O157:H7" neidb | head
#+end_src
#+begin_src latex
  \begin{verbatim}
  # ID       Parent  Name
    1282359  83334   Escherichia coli O157:H7 str. EC1825
    1446652  83334   Escherichia coli O157:H7 str. F6142
    996639   83334   Escherichia coli O157:H7 str. EC10
  ...
  \end{verbatim}
  Our \ty{taxi} query returns 137 distinct taxa.
#+end_src
#+begin_src sh <<query.sh>>=
  taxi -s "O157:H7" neidb |
      tail -n +2 |
      wc -l
#+end_src
#+begin_export latex
In order to find out the taxon that summarizes all O157:H7 strains, we
sort and count the parent taxa to find that 136 of our 137 taxa have
parent 83334, which in turn has parent 562.
#+end_export
#+begin_src sh <<query.sh>>=
  taxi -s O157:H7 neidb |
      tail -n +2 |
      awk '{print $2}' |
      sort |
      uniq -c
#+end_src
#+begin_export latex
\begin{verbatim}
      1 562
    136 83334
\end{verbatim}
We can use \ty{dree} to visualize the taxonomic tree rooted on taxon
83334. The output of \ty{dree} is in dot notation, which can be
rendered into the tree shown in Figure~\ref{fig:ec1} using the program
\ty{dot} from the graphviz package. Figure~\ref{fig:ec1} is too
cramped for reading, but we can see that the tree has only two levels
and that most of its nodes are colored, which means they are linked to
genome sequences.
\begin{figure}
  \begin{center}
    \resizebox{!}{0.9\textheight}{\includegraphics{../tutorial/ec1.ps}}
  \end{center}
\caption{The taxonomic tree of \emph{E. coli} O157:H7 drawn with
  \ty{dree}; taxa with sequenced genomes are shown in color.}\label{fig:ec1}
\end{figure}
#+end_export
#+begin_src sh <<query.sh>>=
  dree 83334 neidb
#+end_src
#+begin_export latex
#+end_export

#+begin_export latex
We saw previously that the parent of 83334 is taxon 562. To find out
its identity, we use \ty{ants} to print the ancestors of 83334. It
turns out that taxon 562 is the species \emph{E. coli}.
#+end_export
#+begin_src sh <<query.sh>>=
  ants 83334 neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Back  ID      Name                      Rank
    9     1       root                      no rank
    8     131567  cellular organisms        no rank
    7     2       Bacteria                  superkingdom
    6     1224    Proteobacteria            phylum
    5     1236    Gammaproteobacteria       class
    4     91347   Enterobacterales          order
    3     543     Enterobacteriaceae        family
    2     561     Escherichia               genus
    1     562     Escherichia coli          species
    0     83334   Escherichia coli O157:H7  serotype
  \end{verbatim}
#+end_src
#+begin_export latex
In the tree returned by \ty{dree}, the number of genomes per node is
reduced to presence/absence. To get the distribution of genomes across
a subtree, we can list its nodes.
#+end_export
#+begin_src sh <<query.sh>>=
  dree -l 83334 neidb | head
#+end_src
#+begin_src latex
  \begin{verbatim}
  # Taxid  Rank      Genomes
  83334    serotype  181
  1282359  strain    1
  1446652  strain    1
  996639   strain    1
  410290   strain    0
  ...
  \end{verbatim}
  We add taxon names to the list.
#+end_src
#+begin_src sh <<query.sh>>=
  dree -l -n 83334 neidb | head
#+end_src
#+begin_export latex
\begin{verbatim}
# Taxid  Rank      Genomes  Name
83334    serotype  181      Escherichia coli O157:H7
1282359  strain    1        Escherichia coli O157:H7 str. EC1825
1446652  strain    1        Escherichia coli O157:H7 str. F6142
996639   strain    1        Escherichia coli O157:H7 str. EC10
410290   strain    0        Escherichia coli O157:H7 str. ...
...
\end{verbatim}
#+end_export
#+begin_export latex
There are 318 genomes for serotype O157:H7.
#+end_export
#+begin_src sh <<query.sh>>=
  dree -n -l 83334 neidb |
      tail -n +2 |
      awk '{s += $3}END{print s}'
#+end_src
#+begin_export latex
We can reverse-sort the taxon list by the number of genomes to see
that it ranges from 181 to 0.
#+end_export
#+begin_src sh <<query.sh>>=
  dree -n -l 83334 neidb |
      tail -n +2 |
      sort -k 3 -n -r
#+end_src
#+begin_export latex
\begin{verbatim}
83334    serotype  181      Escherichia coli O157:H7
155864   strain    5        Escherichia coli O157:H7 str. EDL933
1343836  strain    2        Escherichia coli O157:H7 str. F8092B
1286877  strain    2        Escherichia coli O157:H7 str. TW14313
997825   strain    1        Escherichia coli O157:H7 str. 1125
...
1240385  strain    1        Escherichia coli O157:H7 str. ...
991907   strain    0        Escherichia coli O157:H7 str. 262
991906   strain    0        Escherichia coli O157:H7 str. 611
886670   strain    0        Escherichia coli O157:H7 str. ZAP430
410290   strain    0        Escherichia coli O157:H7 str. ...
1046240  strain    0        Escherichia coli O157:H7 str. 121
\end{verbatim}
#+end_export
#+begin_export latex
Now we search for the neighbors of O157:H7 using \ty{neighbors}. We
restrict the output from \ty{neighbors} to taxa with genome sequences.
#+end_export
#+begin_src sh <<query.sh>>=
  printf 83334 | neighbors -g neidb
#+end_src
#+begin_src latex
  \begin{verbatim}
  # MRCA(targets): 83334, Escherichia coli O157:H7
  # MRCA(targets+neighbors): 562, Escherichia coli
  # Type  Taxon-ID  Name                         Genomes
  t       83334     E. coli O157:H7              GCA_001695515.1|...
  tt      155864    E. coli O157:H7 str. EDL933  GCA_000732965.1|...
  tt      386585    E. coli O157:H7 str. Sakai   GCA_000008865.2
  tt      444447    E. coli O157:H7 str. EC4206  GCA_000181735.1
  ...
  n       2874053   E. coli O25:H1               GCA_021398485.1
  \end{verbatim}
  I've slightly edited the output of \ty{neighbors} for clarity. It
  begins with three hashed lines. The first states the most recent
  common ancestor of the targets, \emph{E. coli} O157:H7, with taxon-ID
  83334. The second line states the most recent common ancestor of the
  neighbors \emph{and} the targets, \emph{E. coli}, taxon 562. The third
  line is the header of the subsequent table, which consists of four
  columns, type, taxon-ID, name, and genomes. There are three possible
  types, ``t'' for known target, ``tt'' for new target, and ``n'' for
  neighbor.

  We can check that the \ty{neighbors} output also contains the 318
  target genomes we previously listed with \ty{dree}.
#+end_src
#+begin_src sh <<query.sh>>=
  printf 83334 |
      neighbors -l neidb |
      tail -n +2 |
      grep '^t' |
      wc -l
#+end_src
#+begin_export latex
To download the target and neighbor genomes, we need the genome
accessions. These are a bit difficult to extract from the ``report
view'' of the \ty{neighbors} results. So we use the ``list view''
instead. It consists of two columns, sample (target or neighbor) and
accession.
#+end_export
#+begin_src sh <<query.sh>>=
  printf 83334 | neighbors -l neidb | head
#+end_src
#+begin_export latex
\begin{verbatim}
# Sample  Accession
t         GCA_001695515.1
t         GCA_017165115.1
t         GCA_017165395.1
...
\end{verbatim}
#+end_export
#+begin_export latex
We save the accessions to the file \ty{acc.txt}.
#+end_export
#+begin_src sh <<query.sh>>=
  printf 83334 | neighbors -l neidb > acc.txt
#+end_src
#+begin_export latex
Apart from the 318 target genomes we've already seen, there are a
staggering 3072 neighbor genomes.
#+end_export
#+begin_src sh <<query.sh>>=
  grep -c '^n' acc.txt
#+end_src
#+begin_export latex
To download the sequences, we split the accessions into two files,
\ty{tacc.txt} for the targets and \ty{nacc.txt} for the neighbors.
#+end_export
#+begin_src sh <<query.sh>>=
  grep '^t' acc.txt | awk '{print $2}' > tacc.txt
  grep '^n' acc.txt | awk '{print $2}' > nacc.txt
#+end_src
#+begin_export latex
We use the program \ty{datasets} provided by the NCBI to download
genomes. It is available from the \ty{datasets} web site,
\begin{center}
\ty{https://www.ncbi.nlm.nih.gov/datasets/}  
\end{center}
We restrict our analysis to genomes with assembly-level ``complete''
and exclude genomes flagged as ``atypical''. We download the genomes
in ``dehydrated'' form. We begin with the target genomes, of which
there are 132. This means out of the 318 target genomes across all
assembly levels, only 132 are typical and complete. We save the target
genomes in \ty{tdata.zip}.
#+end_export
#+begin_src sh <<query.sh>>=
  datasets download genome accession \
	   --inputfile tacc.txt \
	   --assembly-level complete \
	   --exclude-atypical \
	   --dehydrated \
	   --filename tdata.zip
#+end_src
#+begin_export latex
We repeat the download for the neighbor genomes, where only 270 out of
the 3072 pass muster.
#+end_export
#+begin_src sh <<query.sh>>=
  datasets download genome accession \
	   --inputfile nacc.txt \
	   --assembly-level complete \
	   --exclude-atypical \
	   --dehydrated \
	   --filename ndata.zip
#+end_src
#+begin_export latex
The genomes arrive as zipped archives. We unzip the targets into the
directory \ty{tdata}.
#+end_export
#+begin_src sh <<query.sh>>=
  unzip tdata.zip -d tdata
#+end_src
#+begin_export latex
We unzip the neighbors into the directory \ty{ndata}.
#+end_export
#+begin_src sh <<query.sh>>=
  unzip ndata.zip -d ndata
#+end_src
#+begin_export latex
We rehydrate the 132 target genomes.
#+end_export
#+begin_src sh <<query.sh>>=
  datasets rehydrate --directory tdata
#+end_src
#+begin_export latex
We rehydrate the 270 neighbor genomes.
#+end_export
#+begin_src sh <<query.sh>>=
  datasets rehydrate --directory ndata
#+end_src
#+begin_export latex
For easier handling, we move the genomes into a new directory,
\ty{all}. We begin with the targets. To help dividing the data into
true targets and neighbors later, we give target genomes the prefix
\ty{t}.
#+end_export
#+begin_src sh <<query.sh>>=
  mkdir all
  for a in tdata/ncbi_dataset/data/*/*.fna
  do
      b=$(basename $a)
      mv $a all/t$b
  done
#+end_src
#+begin_export latex
We also move the neighbor genomes into \ty{all}, only this time we
mark their names with prefix \ty{n}.
#+end_export
#+begin_src sh <<query.sh>>=
  for a in ndata/ncbi_dataset/data/*/*.fna
  do
      b=$(basename $a)
      mv $a all/n$b
  done
#+end_src
#+begin_export latex
We've now got the taxonomic targets and neighbors united in the
directory \ty{all}, but distinguishable by their prefix. Our next task
is to extract from this data set the phylogenetic---as opposed to
taxonomic---targets and neighbors. We do this by calculating a
distance-based phylogeny. We calculate the requisite distances using
the program
\ty{phylonium}\footnote{\ty{https://github.com/evolbioinf/phylonium}}
and save them in \ty{o157.dist}.
#+end_export
#+begin_src sh <<query.sh>>=
  phylonium all/* > o157.dist
#+end_src
#+begin_export latex
We calculate the neighbor-joining tree from the distances with \ty{nj}
and midpoint root it with \ty{midRoot}. Both programs are part of the
the biobox\footnote{\ty{https://github.com/evolbioinf/biobox}}. Then
we label the internal nodes of the phylogeny with \ty{land}, which is
part of Neighbors, and save the final tree in \ty{o157.nwk}.
#+end_export
#+begin_src sh <<query.sh>>=
  nj o157.dist | midRoot | land > o157.nwk
#+end_src
#+begin_export latex
The tree in \ty{o157.nwk} is in the popular Newick format, and you can
render it with your favorite tree plotting program. One example of
such a program is \ty{plotTree} from the biobox. Its default plot
dimensions are too small for our tree of 402 taxa, so we set the
dimensions to $1200\times 1200$ pixels.
#+end_export
#+begin_src sh <<query.sh>>=
  plotTree -d 1200,1200 o157.nwk
#+end_src
#+begin_export latex
However, even at this magnification the taxon labels are difficult to
read. So we replace the neighbors by a simple \ty{n}, which reveals
that the targets are concentrated in the top part of the tree.
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/n[^f]*fna/n/g' o157.nwk |
      plotTree -d 1200,1200
#+end_src
#+begin_export latex
To further explore the target region of our tree, let's pick the
subtree rooted on node 234 as it appears to contain most targets and a
bit of neighbor context. We now see that node 255 contains a lone
target, while node 256 contains the neighbor clade 257 and the target
clade 264.
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/n[^f]*fna/n/g' o157.nwk |
      pickle -t 234 |
      plotTree -d 1200,1200 
#+end_src
#+begin_export latex
To make the target clade easier to read, we further zoom into it by
picking node 264.
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/n[^f]*fna/n/g' o157.nwk |
      pickle -t 264 |
      plotTree -d 1200,1200 
#+end_src
#+begin_export latex
At this magnification, you might notice that there are also taxonomic
neighbors interspersed in our target clade. We count nine such
misclassified taxa, which we treat as targets in subsequent analyses.
#+end_export
#+begin_src sh <<query.sh>>=
  pickle 264 o157.nwk |
      grep -c '^n'
#+end_src
#+begin_export latex
Let's remove a chunk of the target clade to make it easier to read
both the leaf labels and node labels. Nodes can be removed by using
\ty{pickle} in both tree and complement mode. Let's remove node 302.
#+end_export
#+begin_src sh <<query.sh>>=
  sed 's/n[^f]*fna/n/g' o157.nwk |
      pickle -t 264 |
      pickle -t -c 302 |
      plotTree -d 1200,1200
#+end_src
#+begin_export latex
Now we also reduce the target labels to their first character and plot
the reduced tree rooted on 255 shown in Figure~\ref{fig:o157}.
\begin{figure}
\begin{center}
\includegraphics{../tutorial/ec2.ps}
\end{center}
\caption{Part of the tree containing target and neighbor genomes of
  \emph{E. coli} O157:H7; leaf labels are reduced to targets
  (\emph{t}) and neighbors (\emph{n}). }\label{fig:o157}
\end{figure}
#+end_export
#+begin_src sh <<query.sh>>=
  sed -E 's/([nt])[^f]*fna/\1/g' o157.nwk |
      pickle -t 255 |
      pickle -t -c 302 |
      plotTree -d 1200,1200
#+end_src
#+begin_export latex
In Figure~\ref{fig:o157} clade 264 is our target clade, while its
closely related sister clade, 257, is made up of neighbors. As we
already noted, the root of this partial tree, 255, is connected to a
singleton branch leading to a target. This is one of two taxonomic
targets outside of clade 264.
#+end_export
#+begin_src sh <<query.sh>>=
  pickle -c 264 o157.nwk | grep '^t'
#+end_src
#+begin_export latex
\begin{verbatim}
tGCA_022558925.1_ASM2255892v1_genomic.fna
tGCA_003722195.1_ASM372219v1_genomic.fna
\end{verbatim}

Since the distance between this lone putative target and
the many targets in clade 264 is substantial, we reassign the loner as
a neighbor.

We begin our search for markers by splitting our tree into targets,
i. e. clade 264, and neighbors, the rest.

To separate the targets, we make a directory, \ty{targets}. Then we
use \ty{pickle} in default mode to list the taxa in the target
clade. For each taxon we create a symbolic link to the original data.
#+end_export
#+begin_src sh <<query.sh>>=
  mkdir targets
  pickle 264 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/targets/$a
      done
#+end_src
#+begin_export latex
We repeat this for the genomes \emph{not} in clade 264, which we list
by using the complement option (\ty{-c}) in \ty{pickle}.
#+end_export
#+begin_src sh <<query.sh>>=
  mkdir neighbors
  pickle -c 264 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_export latex
In preparation for running \ty{fur}, we make its database with
\ty{makeFurDb}. Since the database is used to compare the targets in
node 264 with the rest of the taxa, we call it \ty{264.db}. Its
construction takes approximately 12.5 minutes.
#+end_export
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets/ -n neighbors/ -d 264.db
#+end_src
#+begin_export latex
Given the database, we can apply \ty{fur} to it. This takes six
seconds, but unfortunately all our marker candidates are lost in the
second subtraction step.
#+end_export
#+begin_src sh <<query.sh>>=
  fur -d 264.db
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length  Ns
  -------------  ---------  ------  --
  Subtraction_1         39   29011   0
  Intersection           7    2750  13
  Subtraction_2          0       0   0
\end{verbatim}

The second subtraction step is implemented by a call to Blast. We can
make this step less sensitive, i.e. subtract less, by using megablast
mode instead of the default blastn mode. This returns two fragments of
a combined length of 210 nucleotides.---Still not much.
#+end_export
#+begin_src sh <<query.sh>>=
   fur -m -d 264.db/
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length  Ns
  -------------  ---------  ------  --
  Subtraction_1         39   29011   0
  Intersection           7    2750  13
  Subtraction_2          2     210   0
\end{verbatim}

In an attempt to improve our marker yield, we look
for nested markers. Notice that in Figure~\ref{fig:o157} the branch
separating node 255 from node 256 is much longer than the branch
separating clades 264 and 257. So we begin our search for nested
markers by looking for regions that distinguish clade 256 from the
rest, and then regions that distinguish clade 264---our targets---from
its sister clade 257 (Figure~\ref{fig:o157}). We begin by removing
the target symbolic links we generated in the previous round. Then we
set new symbolic links for clade 256.
#+end_export
#+begin_src sh <<query.sh>>=
  rm targets/*
  pickle 256 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/targets/$a
      done
#+end_src
#+begin_export latex
We repeat for the neighbors, that is, all the taxa not contained in
clade 256.
#+end_export
#+begin_src sh <<query.sh>>=
  rm neighbors/*
  pickle -c 256 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_export latex
We run \ty{makeFurDb} on the new combination of targets and neighbors
to create a database for comparing clade 256 to the rest of the taxa,
\ty{256.db}. This run takes a bit over 10 minutes.
#+end_export
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets/ -n neighbors/ -d 256.db
#+end_src
#+begin_export latex
We look for markers of clade 256 and find only a 196 bp region that is
riddled with 67 unknown nucleotides, \ty{N}s.
#+end_export
#+begin_src sh <<query.sh>>=
  fur -d 256.db
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length   Ns
  -------------  ---------  ------   --
  Subtraction_1        217   80466    0
  Intersection         111   18782  800
  Subtraction_2          1     196   67
...
\end{verbatim}
#+end_export
#+begin_export latex
However, if we switch to the less sensitive megablast mode, we get 3.2
kb, of roughly half a kb is made up of \ty{N}s.---That's a start, and
we save the result in file \ty{256.fasta}.
#+end_export
#+begin_src sh <<query.sh>>=
  fur -m -d 256.db/ > 256.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length   Ns
  -------------  ---------  ------   --
  Subtraction_1        217   80466    0
  Intersection         111   18782  800
  Subtraction_2         14    3214  529
\end{verbatim}
Now we look for markers that distinguish target clade 264 from its
closest relative, clade 257 (Figure~\ref{fig:o157}). As before, we
first construct the target set.
#+end_export
#+begin_src sh <<query.sh>>=
  rm targets/*
  pickle 264 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/targets/$a
      done
#+end_src
#+begin_export latex
Similarly, we construct the neighbors as consisting of the taxa in
clade 257.
#+end_export
#+begin_src sh <<query.sh>>=
  rm neighbors/*
      pickle 257 o157.nwk |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_export latex
We run \ty{makeFurDb} to get a database for comparing targets 264 and
neighbors 257, \ty{264\_257.db}. Since the neighborhood contains only
eight taxa, this run of \ty{makeFurDb} only takes half a minute.
#+end_export
#+begin_src sh <<query.sh>>=
  makeFurDb -t targets/ -n neighbors/ -d 264_257.db
#+end_src
#+begin_export latex
Application of \ty{fur} to our new databaase yields 13.3 kb markers,
of which 4.9 kb are \ty{N}s; again, a substantial amount. We save the
markers in \ty{264\_257.fasta}.
#+end_export
#+begin_src sh <<query.sh>>=
  fur -d 264_257.db/ > 264_257.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length    Ns
  -------------  ---------  ------    --
  Subtraction_1        331  255255     0
  Intersection         109   33590   645
  Subtraction_2         15   13279  4863
\end{verbatim}
#+end_export
#+begin_export latex
The next step in the design of diagnostic markers would be to
construct PCR primers based on \ty{256.fasta} and
\ty{264\_257.fasta}. We would then test \emph{in silico} the
specificity and sensitivity of the pair of primers in detecting
\emph{E. coli} O157:H7. Any primers from the \emph{in silico} work
would ultimately be tested in the lab.
#+end_export
