#+begin_src latex
  \section{\ty{tdb}}
  The package \ty{tdb} provides code for constructing and navigating
  \ty{tax.db} (Figure~\ref{fig:db}). Its outline has hooks for imports,
  types, methods, and functions.
  \bpa{tdb}{pa:tdb}
#+end_src
#+begin_src go <<tdb.go>>=
  // Package tdb constructs and queries the taxonomy database.
  package tdb

  import (
	  //<<Imports, Pa.~\ref{pa:tdb}>>
  )
  //<<Types, Pa.~\ref{pa:tdb}>>
  //<<Methods, Pa.~\ref{pa:tdb}>>
  //<<Functions, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  \epa The package \ty{tdb} has two central types: \ty{TaxonDB} wraps
  the relational database shown in Figure~\ref{fig:db} and \ty{Taxonomy}
  is the taxonomic tree.
#+end_src
#+begin_src go <<Types, Pa.~\ref{pa:tdb}>>=
  type TaxonomyDB struct {
	  db *sql.DB
  }
#+end_src
#+begin_src latex
  We import \ty{sql}. In addition, we import a driver for \ty{sqlite3},
  \ty{go-sqlite3}, using a blank import.
#+end_src
#+begin_src go <<Imports, Pa.~\ref{pa:tdb}>>=
  "database/sql"
  _ "github.com/mattn/go-sqlite3"
#+end_src
#+begin_src latex
  \subsection{\ty{NewTaxonomyDB}}
  The function \ty{NewTaxonomyDB} takes as parameters the names of the
  five input files from which we construct the database, and the name of
  the database. It opens these files, opens a new database, constructs
  the database, closes the files, and closes the database.
#+end_src
#+begin_src go <<Functions, Pa.~\ref{pa:tdb}>>=
  // NewTaxonomyDB takes as parameters the names
  // of the five data files and the database name,
  // and constructs the database from them.
  func NewTaxonomyDB(nodes, names, prokaryotes,
	  eukaryotes, viruses, dbName string) {
	  //<<Open files, Pa.~\ref{pa:tdb}>>
	  //<<Open database, Pa.~\ref{pa:tdb}>>
	  //<<Construct database, Pa.~\ref{pa:tdb}>>
	  //<<Close database, Pa.~\ref{pa:tdb}>>
	  //<<Close files, Pa.~\ref{pa:tdb}>>
  }
#+end_src
#+begin_src latex
  We open the five input tables.
#+end_src
#+begin_src go <<Open files, Pa.~\ref{pa:tdb}>>=
  of := util.Open(nodes)
  af := util.Open(names)
  pf := util.Open(prokaryotes)
  ef := util.Open(eukaryotes)
  vf := util.Open(viruses)
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Pa.~\ref{pa:tdb}>>=
  "github.com/evolbioinf/neighbors/util"
#+end_src
#+begin_src latex
  Before opening the database, we check whether it already exists. If we
  cannot open the database, we abort.
#+end_src
#+begin_src go <<Open database, Pa.~\ref{pa:tdb}>>=
  //<<Does database exist? Pa.~\ref{pa:tdb}>>
  db, err := sql.Open("sqlite3", dbName)
  if err != nil { log.Fatal(err) }
#+end_src
#+begin_src latex
  We import \ty{log}.
#+end_src
#+begin_src go <<Imports, Pa.~\ref{pa:tdb}>>=
  "log"
#+end_src
#+begin_src latex
  If we are asked to build a new database on top of an existing one, the
  user has probably made a mistake, so we bow out.
#+end_src
#+begin_src go <<Does database exist? Pa.~\ref{pa:tdb}>>=
  _, err := os.Stat(dbName)
  if err == nil {
	  fmt.Fprintf(os.Stderr, "database %s already exists\n",
		  dbName)
	  os.Exit(1)
  }
#+end_src
#+begin_src latex
  We import \ty{os} and \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Pa.~\ref{pa:tdb}>>=
  "os"
  "fmt"
#+end_src
#+begin_src latex
  To construct the database, we construct the input tables, and load
  their counterparts in the database.
#+end_src
#+begin_src go <<Construct database, Pa.~\ref{pa:tdb}>>=
  //<<Construct tables, Pa.~\ref{pa:tdb}>>
  //<<Load tables, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  As illustrated in Figure~\ref{fig:db}, we construct two tables,
  \ty{taxon} and \ty{genome}.
#+end_src
#+begin_src go <<Construct tables, Pa.~\ref{pa:tdb}>>=
  //<<Construct table \ty{taxon}, Pa.~\ref{pa:tdb}>>
  //<<Construct table \ty{genome}, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  Table \ty{taxon} has the attributes \ty{taxid}, \ty{parent},
  \ty{name}, and \ty{rank}. Taxon-IDs are integers, names are
  text. \ty{taxid} is also the primary key. As there are currently 2.4
  million taxa, and this number is bound to grow, we ensure that queries
  are quick by using indexes. The primary key, \ty{taxid}, is
  automatically indexed and we construct an index for \ty{parent}. We
  might be tempted to also index the remaining two attributes, \ty{name}
  and \ty{rank}. However, these are text and \ty{sqlite} does not make
  use of indexes on text columns. You can check this on an existing
  database by prefacing a query with \ty{explain query plan}. So we
  leave it at our index for \ty{parent}.
#+end_src
#+begin_src go <<Construct table \ty{taxon}, Pa.~\ref{pa:tdb}>>=
  sqlStmt := `create table taxon (
  taxid int, parent int, name text, rank text,
  primary key(taxid));
  create index taxon_parent_idx on taxon(parent);`
  if _, err := db.Exec(sqlStmt); err != nil {
	  log.Fatal(err)
  }
#+end_src
#+begin_src latex
  Table \ty{genome} has attributes \ty{taxid}, \ty{size},
  \ty{replicons}, \ty{accession}, and \ty{status}. To stress that every
  genome belongs to exactly one taxon, we declare \ty{taxid} as foreign
  key into \ty{taxon}. We also index the numerical attributes \ty{taxid}
  and \ty{size}.
#+end_src
#+begin_src go <<Construct table \ty{genome}, Pa.~\ref{pa:tdb}>>=
  sqlStmt = `create table genome (
  taxid int, size real, replicons text, 
	 accession text, status text,
  foreign key(taxid) references taxon(taxid));
  create index genome_taxid_idx on genome(taxid);
  create index genome_size_idx on genome(size);`
  if _, err := db.Exec(sqlStmt); err != nil {
	  log.Fatal(err)
  }
#+end_src
#+begin_src latex
  Since \ty{genome} has a foreign key referring to \ty{taxon}, we load
  \ty{taxon} before \ty{genome}.
#+end_src
#+begin_src go <<Load tables, Pa.~\ref{pa:tdb}>>=
  //<<Load table \ty{taxon}, Pa.~\ref{pa:tdb}>>
  //<<Load table \ty{genome}, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex 
  To load \ty{taxon}, we simulate a join of \ty{nodes.dmp} and
  \ty{names.dmp} on taxon-ID. For this we create the type \ty{taxon}
  with the same four fields as the four attributes in
  Figure~\ref{fig:db}.
#+end_src
#+begin_src go <<Types, Pa.~\ref{pa:tdb}>>=
  type taxon struct {
	  taxid, parent int
	  name, rank string
  }
#+end_src
#+begin_src latex
  We read the taxa into a map and insert them into the table \ty{taxon}.
#+end_src
#+begin_src go <<Load table \ty{taxon}, Pa.~\ref{pa:tdb}>>=
  taxa := make(map[int]*taxon)
  //<<Read taxa, Pa.~\ref{pa:tdb}>>
  //<<Insert taxa, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  To read the taxa, we first parse the nodes file, then the names file.
#+end_src
#+begin_src go <<Read taxa, Pa.~\ref{pa:tdb}>>=
  //<<Parse nodes file, Pa.~\ref{pa:tdb}>>
  //<<Parse names file, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  We traverse the nodes file using a scanner. The first column contains
  the taxon-ID, the second the parent's ID, the third the taxon's
  rank. Columns are delimited by \verb+\t|\t+ and we convert the strings
  denoting IDs to integers before storing them.
#+end_src
#+begin_src go <<Parse nodes file, Pa.~\ref{pa:tdb}>>=
  scanner := bufio.NewScanner(of)
  for scanner.Scan() {
	  row := scanner.Text()
	  fields := strings.SplitN(row, "\t|\t", 4)
	  t := new(taxon)
	  t.taxid, err = strconv.Atoi(fields[0])
	  if err != nil { log.Fatal(err) }
	  t.parent, err = strconv.Atoi(fields[1])
	  if err != nil { log.Fatal(err) }
	  t.rank = fields[2]
	  taxa[t.taxid] = t
  }
#+end_src
#+begin_src latex
  We import \ty{bufio}, \ty{strings}, and \ty{strconv}.
#+end_src
#+begin_src go <<Imports, Pa.~\ref{pa:tdb}>>=
  "bufio"
  "strings"
  "strconv"
#+end_src
#+begin_src latex
  We are done with the nodes file and close it.
#+end_src
#+begin_src go <<Close files, Pa.~\ref{pa:tdb}>>=
  of.Close()
#+end_src
#+begin_src latex
  The names file contains the taxon-ID in the first column and the name
  in the second. Now, there are several kinds of names, scientific,
  common, and more. We store the scientific names. To parse the file, we
  again use a scanner and split the columns at \verb+\t|\t+.
#+end_src
#+begin_src go <<Parse names file, Pa.~\ref{pa:tdb}>>=
  scanner = bufio.NewScanner(af)
  for scanner.Scan() {
	  row := scanner.Text()
	  fields := strings.Split(row, "\t|\t")
	  id, err := strconv.Atoi(fields[0])
	  if err != nil { log.Fatal(err) }
	  if fields[3][:3] == "sci" {
		  taxa[id].name = fields[1]
	  }
  }
#+end_src
#+begin_src latex
  We are done with the names file and close it.
#+end_src
#+begin_src go <<Close files, Pa.~\ref{pa:tdb}>>=
  af.Close()
#+end_src
#+begin_src latex
  Having read the taxa from the input files, we insert them in the
  \ty{taxon} table. We do this with a transaction, which takes a
  statement and prepares it, before we insert the individual rows.
#+end_src
#+begin_src go <<Insert taxa, Pa.~\ref{pa:tdb}>>=
  tx, err := db.Begin()
  if err != nil { log.Fatal(err) }
  sqlStmt = "insert into taxon(taxid, parent, name, rank) " +
	  "values(?, ?, ?, ?)"
  stmt, err := tx.Prepare(sqlStmt)
  if err != nil { log.Fatal(err) }
  //<<Insert rows into table \ty{taxon}, Pa.~\ref{pa:tdb}>>
  tx.Commit()
  stmt.Close()
#+end_src
#+begin_src latex
  Each entry in the \ty{taxa} map corresponds to a row in the table.
#+end_src
#+begin_src go <<Insert rows into table \ty{taxon}, Pa.~\ref{pa:tdb}>>=
  for _, v := range taxa {
	  _, err = stmt.Exec(v.taxid, v.parent, v.name, v.rank)
	  if err != nil { log.Fatal(err) }
  }
#+end_src
#+begin_src latex
  The next table to load is \ty{genome}. Like the taxa, we read the
  genomes from input and insert them.
#+end_src
#+begin_src go <<Load table \ty{genome}, Pa.~\ref{pa:tdb}>>=
  //<<Read genomes, Pa.~\ref{pa:tdb}>>
  //<<Insert genomes, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  We read each genome into a struct that holds the four attributes shown
  in Figure~\ref{fig:db}, \ty{taxid}, \ty{replicons}, \ty{accession},
  \ty{status}, and \ty{size}.
#+end_src
#+begin_src go <<Types, Pa.~\ref{pa:tdb}>>=
  type genome struct {
	  taxid int
	  replicons, accession, status string
	  size float64
  }
#+end_src
#+begin_src latex
  We save genomes in a slice and read them from the three files that
  correspond to the three deep divisions of life, prokaryotes,
  eukaryotes, and viruses.
#+end_src
#+begin_src go <<Read genomes, Pa.~\ref{pa:tdb}>>=
  var genomes []genome
  //<<Read prokaryote genomes, Pa.~\ref{pa:tdb}>>
  //<<Read eukaryote genomes, Pa.~\ref{pa:tdb}>>
  //<<Read virus genomes, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  In the prokaryote genomes file, we skip the header, split the columns
  at tabs, generate the genomes, and save them.
#+end_src
#+begin_src go <<Read prokaryote genomes, Pa.~\ref{pa:tdb}>>=
  fn := pf.Name()
  scanner = bufio.NewScanner(pf)
  var gen genome
  for scanner.Scan() {
	  row := scanner.Text()
	  if row[0] == '#' { continue }
	  fields := strings.Split(row, "\t")
	  //<<Generate a prokaryote genome, Pa.~\ref{pa:tdb}>>
	  genomes = append(genomes, gen)
  }
#+end_src
#+begin_src latex
  Table~\ref{tab:pg} shows the columns in the table of prokaryote
  genomes. We can see that the taxon ID is in the second column, the
  size in Mb in the seventh, the replicons in the nineth, the status in
  the 16th, and the assembly accessions in the 19th. Unfortunately, it
  is possible that there is no genome size, in which case we set it to
  -1. It is also possible that the row is incomplete, in which case we
  skip it and send a warning.
  \begin{table}
    \caption{Columns in the table of prokaryote genomes supplied by the NCBI.}\label{tab:pg}
    \begin{center}
      \begin{tabular}{rlrlrl}
	\hline
	\input{../tdb/pro}\\
	\hline
      \end{tabular}
    \end{center}
  \end{table}
#+end_src
#+begin_src go <<Generate a prokaryote genome, Pa.~\ref{pa:tdb}>>=
  if len(fields) < 19 {
	  fmt.Fprintf(os.Stderr,
		  "skipping truncated line in %q\n", fn)
	  continue
  }
  gen.taxid, err = strconv.Atoi(fields[1])
  if err != nil { log.Fatal(err) }
  gen.size, err = strconv.ParseFloat(fields[6], 64)
  if err != nil { gen.size = -1.0 }
  gen.replicons = fields[8]
  gen.status = fields[15]
  gen.accession = fields[18]
#+end_src
#+begin_src latex
  We close the prokaryote genomes file.
#+end_src
#+begin_src go <<Close files, Pa.~\ref{pa:tdb}>>=
  pf.Close()
#+end_src
#+begin_src latex
  Similarly, we read the file for eukaryote genomes.
#+end_src
#+begin_src go <<Read eukaryote genomes, Pa.~\ref{pa:tdb}>>=
  fn = ef.Name()
  scanner = bufio.NewScanner(ef)
  for scanner.Scan() {
	  row := scanner.Text()
	  if row[0] == '#' { continue }
	  fields := strings.Split(row, "\t")
	  //<<Generate a eukaryote genome, Pa.~\ref{pa:tdb}>>
	  genomes = append(genomes, gen)
  }
#+end_src
#+begin_export latex
Table~\ref{tab:eg} shows the columns in the table of eukaryote
genomes. The taxon ID is in the second column, the size in the
seventh, the assembly accession in the nineth, the replicons the
tenth, and the status in the 17th.
\begin{table}
  \caption{Columns in the table of eukaryote genomes supplied by the NCBI.}\label{tab:eg}
  \begin{center}
    \resizebox{\textwidth}{!}{
    \begin{tabular}{rlrlrl}
      \hline
      \input{../tdb/euk}\\
      \hline
    \end{tabular}
    }
  \end{center}
\end{table}
#+end_export
#+begin_src go <<Generate a eukaryote genome, Pa.~\ref{pa:tdb}>>=
  if len(fields) < 10 {
	  fmt.Fprintf(os.Stderr,
		  "skipping truncated line in %q\n", fn)
	  continue
  }
  gen.taxid, err = strconv.Atoi(fields[1])
  if err != nil { log.Fatal(err) }
  gen.size, err = strconv.ParseFloat(fields[6], 64)
  if err != nil { gen.size = -1.0 }
  gen.accession = fields[8]
  gen.replicons = fields[9]
  gen.status = fields[16]
#+end_src
#+begin_src latex
  We close the eukaryote genomes file.
#+end_src
#+begin_src go <<Close files, Pa.~\ref{pa:tdb}>>=
  ef.Close()
#+end_src
#+begin_src latex
  We scan the file of viral genomes.
#+end_src
#+begin_src go <<Read virus genomes, Pa.~\ref{pa:tdb}>>=
  fn = vf.Name()
  scanner = bufio.NewScanner(vf)
  for scanner.Scan() {
	  row := scanner.Text()
	  if row[0] == '#' { continue }
	  fields := strings.Split(row, "\t")
	  //<<Generate a viral genome, Pa.~\ref{pa:tdb}>>
	  genomes = append(genomes, gen)
  }
#+end_src
#+begin_src latex
  Table~\ref{tab:vg} shows the columns in the table of viral
  genomes. Again, the taxon ID is in the second column and the size in
  the seventh. However, this time the size is in kb, which we convert to
  Mb. Also, there are no ``Replicons'', nor is there an ``Assembly
  Accession''. Instead, we have ``Segments'' in column 10, which we use
  both as attributes \ty{replicons} and \ty{accession} in our
  database. The status is in column 15.
  \begin{table}
    \caption{Columns in the table of viral genomes supplied by the NCBI.}\label{tab:vg}
    \begin{center}
      \begin{tabular}{rlrlrl}
	\hline
	\input{../tdb/vir}\\
	\hline
      \end{tabular}
    \end{center}
  \end{table}
#+end_src
#+begin_src go <<Generate a viral genome, Pa.~\ref{pa:tdb}>>=
  if len(fields) < 10 {
	  fmt.Fprintf(os.Stderr,
		  "skipping truncated line in %q", fn)
	  continue
  }
  gen.taxid, err = strconv.Atoi(fields[1])
  if err != nil { log.Fatal(err) }
  gen.size, err = strconv.ParseFloat(fields[6], 64)
  if err != nil { gen.size = -1.0 }
  if gen.size > 0 { gen.size /= 1000.0 }
  gen.replicons = fields[9]
  gen.accession = fields[9]
  gen.status = fields[14]
#+end_src
#+begin_src latex
  We close the virus genomes file.
#+end_src
#+begin_src go <<Close files, Pa.~\ref{pa:tdb}>>=
  vf.Close()
#+end_src
#+begin_src latex
  To insert the genomes into the \ty{genomes} table, we use a
  transaction like we did for the \ty{taxon} table.
#+end_src
#+begin_src go <<Insert genomes, Pa.~\ref{pa:tdb}>>=
  tx, err = db.Begin()
  if err != nil { log.Fatal(err) }
  sqlStmt = "insert into genome(taxid, replicons," +
	  "size, accession, status) " +
	  "values(?, ?, ?, ?, ?)"
  stmt, err = tx.Prepare(sqlStmt)
  if err != nil { log.Fatal(err) }
  //<<Insert rows into table \ty{genome}, Pa.~\ref{pa:tdb}>>
  tx.Commit()
  stmt.Close()
#+end_src
#+begin_src latex
  We insert each entry in the \ty{genomes} slice into table \ty{genome}.
#+end_src
#+begin_src go <<Insert rows into table \ty{genome}, Pa.~\ref{pa:tdb}>>=
  for _, g := range genomes {
	  _, err = stmt.Exec(g.taxid, g.replicons,
		  g.size, g.accession, g.status)
	  if err != nil { log.Fatal(err) }
  }
#+end_src
#+begin_src latex
  The database is constructed, so we close it.
#+end_src
#+begin_src go <<Close database, Pa.~\ref{pa:tdb}>>=
  db.Close()
#+end_src
#+begin_src latex
  \subsection{\ty{OpenTaxonomyDB}}
  The function \ty{OpenTaxonomyDB} opens an existing taxonomy database
  and returns a pointer to it.
#+end_src
#+begin_src go <<Functions, Pa.~\ref{pa:tdb}>>=
  // OpenTaxonomyDB opens an existing taxonomy database and returns a
  // pointer to it.
  func OpenTaxonomyDB(name string) *TaxonomyDB {
	  db := new(TaxonomyDB)
	  var err error
	  db.db, err = sql.Open("sqlite3", name)
	  if err != nil { log.Fatal(err) }
	  return db
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Close}}
  The method \ty{Close} closes a taxonomy database.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  // Close closes the taxonomy database.
  func (t *TaxonomyDB) Close() {
	  t.db.Close()
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Replicons}}
  !The method \ty{Replicons} takes as parameter a taxon-ID and returns a
  !slice of replicons.

  We query for replicons and then store them in the string slice we
  return.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  func (t *TaxonomyDB) Replicons(tid int) []string {
	  var reps []string
	  //<<Query for replicions, Pa.~\ref{pa:tdb}>>
	  //<<Store replicons, Pa.~\ref{pa:tdb}>>
	  return reps
  }
#+end_src
#+begin_src latex
  We generate the query and execute it, which returns a set of table
  rows. The rows are later closed again.
#+end_src
#+begin_src go <<Query for replicions, Pa.~\ref{pa:tdb}>>=
  tmpl := "select replicons from genome where taxid=%d " +
	  "and replicons <> '-'"
  q := fmt.Sprintf(tmpl, tid)
  rows, err := t.db.Query(q)
  if err != nil {
	  log.Fatal(err)
  }
  defer rows.Close()
#+end_src
#+begin_src latex
  We import \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Pa.~\ref{pa:tdb}>>=
  "fmt"
#+end_src
#+begin_src latex
  We append each replicon to our slice of replicons.
#+end_src
#+begin_src go <<Store replicons, Pa.~\ref{pa:tdb}>>=
  s := ""
  for rows.Next() {
	  err := rows.Scan(&s)
	  if err != nil {
		  log.Fatal(err)
	  }
	  reps = append(reps, s)
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Accessions}}
  !The method \ty{Accessions} takes as parameter a taxon-ID and returns a
  !slice of assembly accessions.

  We query for accessions and then store them in the string slice we
  return.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  func (t *TaxonomyDB) Accessions(tid int) []string {
	  var accessions []string
	  //<<Query for accessions, Pa.~\ref{pa:tdb}>>
	  //<<Store accessions, Pa.~\ref{pa:tdb}>>
	  return accessions
  }
#+end_src
#+begin_src latex
  We generate the query and execute it, which returns a set of table
  rows. The rows are later closed again.
#+end_src
#+begin_src go <<Query for accessions, Pa.~\ref{pa:tdb}>>=
  tmpl := "select accession from genome where taxid=%d"
  q := fmt.Sprintf(tmpl, tid)
  rows, err := t.db.Query(q)
  if err != nil {
	  log.Fatal(err)
  }
  defer rows.Close()
#+end_src
#+begin_src latex
  We append each accession to our slice of replicons.
#+end_src
#+begin_src go <<Store accessions, Pa.~\ref{pa:tdb}>>=
  accession := ""
  for rows.Next() {
	  err := rows.Scan(&accession)
	  if err != nil {
		  log.Fatal(err)
	  }
	  accessions = append(accessions, accession)
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Name}}
  The method \ty{Name} takes as argument a taxon ID and returns the
  taxon's name. We construct the query, execute it, and extract the
  name.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  // Name returns a taxon's name.
  func (t *TaxonomyDB) Name(taxon int) string {
	  n := ""
	  //<<Construct name query, Pa.~\ref{pa:tdb}>>
	  //<<Execute name query, Pa.~\ref{pa:tdb}>>
	  //<<Extract name, Pa.~\ref{pa:tdb}>>
	  return n
  }
#+end_src
#+begin_src latex
  We construct the query from a string template.
#+end_src
#+begin_src go <<Construct name query, Pa.~\ref{pa:tdb}>>=
  tmpl := "select name from taxon where taxid=%d"
  q := fmt.Sprintf(tmpl, taxon)
#+end_src
#+begin_src latex
  We execute the query, which might throw an error. We also close the
  results table once we're done with it.
#+end_src
#+begin_src go <<Execute name query, Pa.~\ref{pa:tdb}>>=
  rows, err := t.db.Query(q)
  if err != nil {
	  log.Fatal(err)
  }
  defer rows.Close()
#+end_src
#+begin_src latex
  Our results table contains only the requested single name. We scan
  this and catch potential errors.
#+end_src
#+begin_src go <<Extract name, Pa.~\ref{pa:tdb}>>=
  rows.Next()
  err = rows.Scan(&n)
  if err != nil {
	  log.Fatal(err)
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Rank}}
  !The method \ty{Rank} takes as argument a taxon ID and returns the
  !taxon's name. We construct the query, execute it, and extract the
  !name.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  func (t *TaxonomyDB) Rank(taxon int) string {
	  rank := ""
	  //<<Construct rank query, Pa.~\ref{pa:tdb}>>
	  //<<Execute rank query, Pa.~\ref{pa:tdb}>>
	  //<<Extract rank, Pa.~\ref{pa:tdb}>>
	  return rank
  }
#+end_src
#+begin_src latex
  We construct the rank query from a string template.
#+end_src
#+begin_src go <<Construct rank query, Pa.~\ref{pa:tdb}>>=
  tmpl := "select rank from taxon where taxid=%d"
  q := fmt.Sprintf(tmpl, taxon)
#+end_src
#+begin_src latex
  We execute the rank query, which might throw an error. We also close
  the results table once we're done with it.
#+end_src
#+begin_src go <<Execute rank query, Pa.~\ref{pa:tdb}>>=
  rows, err := t.db.Query(q)
  if err != nil {
	  log.Fatal(err)
  }
  defer rows.Close()
#+end_src
#+begin_src latex
  Our results table contains only the requested single rank. We scan
  this and catch potential errors.
#+end_src
#+begin_src go <<Extract rank, Pa.~\ref{pa:tdb}>>=
  rows.Next()
  err = rows.Scan(&rank)
  if err != nil {
	  log.Fatal(err)
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Parent}}
  The method \ty{Parent} takes as argument a taxon ID and returns the
  taxon ID of its parent. We construct the query, execute it, and
  extract the parent.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  // Parent returns a taxon's parent.
  func (t *TaxonomyDB) Parent(c int) int {
	  p := 0
	  //<<Construct parent query, Pa.~\ref{pa:tdb}>>
	  //<<Execute parent query, Pa.~\ref{pa:tdb}>>
	  //<<Extract parent, Pa.~\ref{pa:tdb}>>
	  return p
  }
#+end_src
#+begin_src latex
  We construct the parent query from a string template.
#+end_src
#+begin_src go <<Construct parent query, Pa.~\ref{pa:tdb}>>=
  tmpl := "select parent from taxon where taxid=%d"
  q := fmt.Sprintf(tmpl, c)
#+end_src
#+begin_src latex
  We execute the query to get the results table. Query execution might
  throw an error, which we catch. We also make sure the results table is
  eventually closed again.
#+end_src
#+begin_src go <<Execute parent query, Pa.~\ref{pa:tdb}>>=
  rows, err := t.db.Query(q)
  if err != nil {
	  log.Fatal(err)
  }
  defer rows.Close()
#+end_src
#+begin_src latex
  Our results table contains at most one row with one entry, the
  parent. We extract this and catch possible errors.
#+end_src
#+begin_src go <<Extract parent, Pa.~\ref{pa:tdb}>>=
  rows.Next()
  err = rows.Scan(&p)
  if err != nil {
	  log.Fatal(err)
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Children}}
  The method \ty{Children} takes as argument a taxon ID and returns its
  children. We construct the children query, execute it, and extract the
  children. The children are stored in an integer slice, which we
  construct at the start of the method and return at the end.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  // Children returns a taxon's children.
  func (t *TaxonomyDB) Children(p int) []int {
	  c := make([]int, 0)
	  //<<Construct children query, Pa.~\ref{pa:tdb}>>
	  //<<Execute children query, Pa.~\ref{pa:tdb}>>
	  //<<Extract children, Pa.~\ref{pa:tdb}>>
	  return c
  }
#+end_src
#+begin_src latex
  Like the parent query, we construct the children query from a string
  template.
#+end_src
#+begin_src go <<Construct children query, Pa.~\ref{pa:tdb}>>=
  tmpl := "select taxid from taxon where parent=%d"
  q := fmt.Sprintf(tmpl, p)
#+end_src
#+begin_src latex
  We execute the children query to get the results table, catch errors,
  and eventually close the results table again.
#+end_src
#+begin_src go <<Execute children query, Pa.~\ref{pa:tdb}>>=
  rows, err := t.db.Query(q)
  if err != nil {
	  log.Fatal(err)
  }
  defer rows.Close()
#+end_src
#+begin_src latex
  We copy the children into the slice we've prepared for this purpose.
#+end_src
#+begin_src go <<Extract children, Pa.~\ref{pa:tdb}>>=
  x := 0
  for rows.Next() {
	  err = rows.Scan(&x)
	  if err != nil {
		  log.Fatal(err)
	  }
	  c = append(c, x)
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Subtree}}
  The method \ty{Subtree} returns all taxa in a subtree, including its
  root. It does this by calling the private function \ty{traverseSubtree}.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  // Subtree returns the taxa in the subtree rooted on the given taxon.
  func (t *TaxonomyDB) Subtree(r int) []int {
	  taxa := make([]int, 0)
	  taxa = traverseSubtree(t, r, taxa)
	  return taxa
  }
#+end_src
#+begin_src latex
  \ty{traverseSubtree} is a recursive function, where we take care to
  avoid the infinite loop we would get if we included the root in the
  recursion.
#+end_src
#+begin_src go <<Functions, Pa.~\ref{pa:tdb}>>=
  func traverseSubtree(t *TaxonomyDB, r int, taxa []int) []int {
	  taxa = append(taxa, r)
	  ch := t.Children(r)
	  for _, c := range ch {
		  if c != r {
			  taxa = traverseSubtree(t, c, taxa)
		  }
	  }
	  return taxa
  }
#+end_src
#+begin_src latex
  \subsection{\ty{Taxids}}
  Given a taxon name, \ty{Taxids} returns the corresponding
  taxon-IDs. We construct and execute the query for taxon-IDs, extract
  the IDs, and return them.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  // Taxids matches the name of a taxon and returns the corresponding
  // taxon-IDs.
  func (t *TaxonomyDB) Taxids(name string) []int {
	  taxids := make([]int, 0)
	  //<<Construct taxids query, Pa.~\ref{pa:tdb}>>
	  //<<Execute taxids query, Pa.~\ref{pa:tdb}>>
	  //<<Extract taxids, Pa.~\ref{pa:tdb}>>
	  return taxids
  }
#+end_src
#+begin_src latex
  We construct the query for taxon-IDs.
#+end_src
#+begin_src go <<Construct taxids query, Pa.~\ref{pa:tdb}>>=
  q := "select taxid from taxon where name like '%s'"
  q = fmt.Sprintf(q, name)
#+end_src
#+begin_src latex
  We execute the query for taxon-IDs and catch potential errors. We also
  make sure the result table is eventually closed again.
#+end_src
#+begin_src go <<Execute taxids query, Pa.~\ref{pa:tdb}>>=
  rows , err := t.db.Query(q)
  if err != nil {
	  log.Fatal(err)
  }
  defer rows.Close()
#+end_src
#+begin_src latex
  We extract and store the taxon-IDs.
#+end_src
#+begin_src go <<Extract taxids, Pa.~\ref{pa:tdb}>>=
  taxid := 0
  for rows.Next() {
	  err = rows.Scan(&taxid)
	  if err != nil {
		  log.Fatal(err)
	  }
	  taxids = append(taxids, taxid)
  }
#+end_src
#+begin_src latex
  \subsection{\ty{MRCA}}
  !The method \ty{MRCA} takes as input a slice of taxon IDs and returns
  !their most recent common ancestor.
  For example, in Figure~\ref{fig:tax}, the most recent
  common ancestor of taxa 4 and 7 is 3. We begin by checking the IDs
  supplied and then search for the MRCA. If we haven't found one, we
  return -1.
#+end_src
#+begin_src go <<Methods, Pa.~\ref{pa:tdb}>>=
  func (t *TaxonomyDB) MRCA(ids []int) int {
	  mrca := -1
	  //<<Check IDs, Pa.~\ref{pa:tdb}>>
	  //<<Search for MRCA, Pa.~\ref{pa:tdb}>>
	  return mrca
  }
#+end_src
#+begin_export latex
If the ID list is empty, something went wrong and we throw an
error. If the ID list contains a single entry, that is the MRCA.
#+end_export
#+begin_src go <<Check IDs, Pa.~\ref{pa:tdb}>>=
  if len(ids) == 0 {
	  log.Fatal("Empty ID list in tdb.MRCA")
  } else if len(ids) == 1 {
	  return ids[0]
  }
#+end_src
#+begin_export latex
There is a rich history of MRCA queries in computer
science~\cite[ch. 3]{ohl13:bio}. However, instead of using the general
solution to the problem, I construct a simpler solution that involves
climbing to the common ancestor of a set of taxa. If these taxa are
closely related, the climb is short.

To be more precise, in each step of our climb, we increment a
descendant counter for each node. If one of these counters is equal to
the number of input taxa, the corresponding node is the
MRCA. Otherwise, we climb to the parents and repeat. So we construct a
variable to count descendants and variables for parents and
children. Then we iterate over the parents.
#+end_export
#+begin_src go <<Search for MRCA, Pa.~\ref{pa:tdb}>>=
  //<<Construct counter for descendants, Pa.~\ref{pa:tdb}>>
  //<<Construct variables for parents and children, Pa.~\ref{pa:tdb}>>
  //<<Iterate over parents, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_export latex
We store descendants in a map between a taxon ID, which is an integer,
and the number of its descendants, another integer. The initial number
of descendants of the taxa supplied is one.
#+end_export
#+begin_src go <<Construct counter for descendants, Pa.~\ref{pa:tdb}>>=
  desc := make(map[int]int)
  for _, id := range ids {
	  desc[id] = 1
  }
#+end_src
#+begin_export latex
We store the parent and child taxa as integer slices. The children
slice is initialized to the taxon IDs supplied.
#+end_export
#+begin_src go <<Construct variables for parents and children, Pa.~\ref{pa:tdb}>>=
  parents := make([]int, 0)
  children := make([]int, 0)
  for _, id := range ids {
	  children = append(children, id)
  }
#+end_src
#+begin_export latex
As long as we have more than a single child, i. e. haven't reached
the root yet, we climb to the next set of parents and we replace the
children by the parents.
#+end_export
#+begin_src go <<Iterate over parents, Pa.~\ref{pa:tdb}>>=
  for len(children) > 1 {
	  //<<Climb to parents, Pa.~\ref{pa:tdb}>>
	  //<<Replace parents by children, Pa.~\ref{pa:tdb}>>
  }
#+end_src
#+begin_export latex
For each parent we reach, we check whether the number of its
descendants is equal to the number of taxa submitted. If yes, we've
found the MRCA and return it.
#+end_export
#+begin_src go <<Climb to parents, Pa.~\ref{pa:tdb}>>=
  for _, child := range children {
	  parent := t.Parent(child)
	  desc[parent] += desc[child]
	  if desc[parent] == len(ids) {
		  mrca = parent
		  break
	  }
	  parents = append(parents, parent)
  }
#+end_src
#+begin_export latex
If the MRCA hasn't been found yet, we replace the children by the
parent and reset the parent slice to empty.
#+end_export
#+begin_src go <<Replace parents by children, Pa.~\ref{pa:tdb}>>=
  if mrca == -1 {
	  children = children[:0]
	  for _, parent := range parents {
		  children = append(children, parent)
	  }
	  parents = parents[:0]
  } else {
	  break
  }
#+end_src
#+begin_src latex
  \subsection{Testing}
  The outline of our code for testing \ty{tdb} has a hook for the
  testing logic.
#+end_src
#+begin_src go <<tdb_test.go>>=
  package tdb

  import (
	  "testing"
  )

  func TestTdb(t *testing.T) {
	  //<<Testing, Pa.~\ref{pa:tdb}>>
  }
#+end_src
#+begin_src latex
  We test the function \ty{NewTaxonomyDB}, and the methods
  \ty{Replicons}, \ty{Name}, \ty{Parent}, \ty{Children}, \ty{Subtree},
  and \ty{Taxids}.
#+end_src
#+begin_src go <<Testing, Pa.~\ref{pa:tdb}>>=
  //<<Test \ty{NewTaxonomyDB}, Pa.~\ref{pa:tdb}>>
  //<<Test \ty{Replicons}, Pa.~\ref{pa:tdb}>>
  //<<Test \ty{Name}, Pa.~\ref{pa:tdb}>>
  //<<Test \ty{Parent}, Pa.~\ref{pa:tdb}>>
  //<<Test \ty{Children}, Pa.~\ref{pa:tdb}>>
  //<<Test \ty{Subtree}, Pa.~\ref{pa:tdb}>>
  //<<Test \ty{Taxids}, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  We build a small database, \ty{taxSmall.db}.
#+end_src
#+begin_src go <<Test \ty{NewTaxonomyDB}, Pa.~\ref{pa:tdb}>>=
  p := "../data/"
  no := p + "nodesTest.dmp"
  na := p + "namesTest.dmp"
  pr := p + "prokaryotes.txt"
  eu := p + "eukaryotes.txt"
  vi := p + "viruses.txt"
  d1 := p + "taxSmall.db"
  NewTaxonomyDB(no, na, pr, eu, vi, d1)
#+end_src
#+begin_src latex
  We extract the full taxonomy from the small database and check it has
  11 entries.
#+end_src
#+begin_src go <<Test \ty{NewTaxonomyDB}, Pa.~\ref{pa:tdb}>>=
  taxdb := OpenTaxonomyDB(d1)
  subtree := taxdb.Subtree(1)
  if len(subtree) != 11 {
	  t.Errorf("get %d rows, want 11", len(subtree))
	  for _, s := range subtree {
		  println(s)
	  }
  }
#+end_src
#+begin_src latex 
  We open a complete taxonomy, submit three taxon-IDs to the method
  \ty{Replicons}, and print out the result.
#+end_src
#+begin_src go <<Test \ty{Replicons}, Pa.~\ref{pa:tdb}>>=
  d2 := p + "neidb"
  taxdb = OpenTaxonomyDB(d2)
  tid := 866775
  reps := taxdb.Replicons(tid)
  get := reps[0]
  want := "chromosome:NC_015278.1/CP002512.1"
  if get != want {
	  t.Errorf("get: %q; want: %q", get, want)
  }
#+end_src
#+begin_src latex
  We look up the name of taxon, 9606, \emph{Homo sapiens}.
#+end_src
#+begin_src go <<Test \ty{Name}, Pa.~\ref{pa:tdb}>>=
  tid = 9606
  want = "Homo sapiens"
  get = taxdb.Name(tid)
  if get != want {
	  t.Errorf("get: %q; want: %q", get, want)
  }
#+end_src
#+begin_src latex
  The parent of \emph{Homo sapiens} is \emph{Homo} with taxon-ID
  9605.
#+end_src
#+begin_src go <<Test \ty{Parent}, Pa.~\ref{pa:tdb}>>=
  w := 9605
  g := taxdb.Parent(tid)
  if g != w {
	  t.Errorf("get parent: %d; want: %d", g, w)
  }
#+end_src
#+begin_src latex
  \emph{Homo sapiens} (9606) has two children.
#+end_src
#+begin_src go <<Test \ty{Children}, Pa.~\ref{pa:tdb}>>=
  w = 2
  g = len(taxdb.Children(tid))
  if g != w {
	  t.Errorf("get %d children; want %d", g, w)
  }
#+end_src
#+begin_src latex
  The \emph{Hominidae} subtree contains 26 nodes.
#+end_src
#+begin_src go <<Test \ty{Subtree}, Pa.~\ref{pa:tdb}>>=
  tid = 207598
  w = 26
  taxa := taxdb.Subtree(tid)
  g = len(taxa)
  if g != w {
	  t.Errorf("get %d nodes in subtree; want %d", g, w)
  }
#+end_src
#+begin_src latex
  To test \ty{Taxids}, we get the ten taxa whose names contain
  \emph{homo sapiens}, of which there are 11. Notice the lower-case
  ``h'' in \emph{homo}, which SQL matches to the upper-case ``H'' in the
  actual names.
#+end_src
#+begin_src go <<Test \ty{Taxids}, Pa.~\ref{pa:tdb}>>=
  w = 11
  taxa = taxdb.Taxids("%homo sapiens%")
  g = len(taxa)
  if g != w {
	  t.Errorf("get %d taxa for homo sapiens; want %d", g, w)
  }
#+end_src
#+begin_src latex
  To test \ty{MRCA}, we construct several tests and run them in a loop.
#+end_src
#+begin_src go <<Test \ty{MRCA}, Pa.~\ref{pa:tdb}>>=
  //<<Construct tests of \ty{MRCA}, Pa.~\ref{pa:tdb}>>
  //<<Run tests of \ty{MRCA}, Pa.~\ref{pa:tdb}>>
#+end_src
#+begin_src latex
  We look for the MRCAs of the following five sets of taxa in the tree
  shown in Figure~\ref{fig:tax}:
  \begin{itemize}
  \item $\{4, 7\}$
  \item $\{4\}$
  \item $\{2, 7\}$
  \item $\{2, 2\}$
  \item $\{4, 7, 6\}$
  \end{itemize}
#+end_src
#+begin_src go <<Construct tests of \ty{MRCA}, Pa.~\ref{pa:tdb}>>=
  taxa := make([][]int, 0)
  var res []int
  taxa = append(taxa, []int{4, 7})
  res = append(res, 3)
  taxa = append(taxa, []int{4})
  res = append(res, 4)
  taxa = append(taxa, []int{2, 7})
  res = append(res, 1)
  taxa = append(taxa, []int{2, 2})
  res = append(res, 2)
  taxa = append(taxa, []int{4, 7, 6})
  res = append(res, 3)
#+end_src
#+begin_src latex
  We loop over the tests.
#+end_src
#+begin_src go <<Run tests of \ty{MRCA}, Pa.~\ref{pa:tdb}>>=
  for i, taxon := range taxa {
	  get := tax.MRCA(taxon)
	  want := res[i]
	  if get != want {
		  t.Errorf("get: %d\nwant: %d\n", get, want)
	  }
  }
#+end_src
