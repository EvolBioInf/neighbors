#+begin_src latex
  \section{taxi}
  The \ty{neighbors} module is based on taxon-IDs. These are difficult
  to remember, so the program \ty{taxi} takes the user from the name of
  an organism to its taxon-ID. The input to \ty{taxi} is a scientific
  name and the taxonomy database. The search is always case-insensitive
  and by default a query is bracketed by wildcards together with its
  internal blanks. For example,
  \begin{verbatim}
  a b
  \end{verbatim}
  becomes
  \begin{verbatim}
  %a% %b%
  \end{verbatim}
  The outer wild cards allow substring matching to find a string like
  \verb+xa by+. Bracketing blanks by wild cards allows matches to
  strings in square brackets, like \verb+xa [y]+. This accounts for the
  policy of the NCBI to use square brackets to indicate
  misclassification. For example, the species \emph{Haemophilus
  ducreyi} is currently stored as the string \ty{[Haemophilus]
    ducreyi}. This seems to mainly affect genus names, but not only, as
  shown by the name \ty{Pseudomonas [fluorescens] ATCC 17400}.

  Instead of this default substring matching, the user can opt for an
  exact matching, in which case no wild cards are inserted. Regardless
  of the query type, there may be more than one, and potentially very
  many, matches. In such cases, paged data retrieval may be more
  convenient than wholesale output of all matches at once. To allow
  paged data retrieval, the user can set a limit on the number of names
  returned and an offset into the results list.

  \subsection*{Implementation}
  The program \ty{taxi} has hooks for imports and the logic of the main
  function.\bpr{taxi}{pr:tax}
#+end_src
#+begin_src go <<taxi.go>>=
  package main

  import (
	  //<<Imports, Pr. \ref{pr:tax}>>
  )

  func main() {
	  //<<Main function, Pr. \ref{pr:tax}>>
  }
#+end_src
#+begin_src latex
  \epr
  In the \ty{main} function we set the usage, declare the options, parse
  the options, get the taxon-IDs, and print them.
#+end_src
#+begin_src go <<Main function, Pr. \ref{pr:tax}>>=
  //<<Set usage, Pr. \ref{pr:tax}>>
  //<<Declare options, Pr. \ref{pr:tax}>>
  //<<Parse options, Pr. \ref{pr:tax}>>
  //<<Get taxon-IDs, Pr. \ref{pr:tax}>>
  //<<Print taxon-IDs, Pr. \ref{pr:tax}>>
#+end_src
#+begin_src latex
  The usage consists of three parts: The actual usage message, an
  explanation of the purpose of \ty{taxi}, and an example command.
#+end_src
#+begin_src go <<Set usage, Pr. \ref{pr:tax}>>=
  u := "taxi [option] <scientific-name> <db>"
  p := "Take user from scientific name to taxon-ID."
  e := "taxi \"homo sapiens\" neidb"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:tax}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  Apart from the version, we declare options for exact matching, limit,
  and offset. The defaults are substring matching, no limit, and no
  offset.
#+end_src
#+begin_src go <<Declare options, Pr. \ref{pr:tax}>>=
  var optV = flag.Bool("v", false, "version")
  var optE = flag.Bool("e", false, "exact match")
  var optL = flag.Int("l", -1, "limit output to <= l taxids")
  var optO = flag.Int("o", 0, "offset into taxid list")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:tax}>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the options and respond to the version option (\ty{-v})
  first, as this would stop the program. Then we get the remaining
  arguments and check there are two of them, the name of the taxon and
  the database. We store both names. Unless the user opted for exact
  matching, we bracket the taxon name and any blanks it might contain
  with wild cards.
#+end_src
#+begin_src go <<Parse options, Pr. \ref{pr:tax}>>=
  flag.Parse()
  if *optV { util.PrintInfo("taxi") }
  args := flag.Args()
  //<<Check arguments, Pr. \ref{pr:tax}>>
  name := args[0]
  db := args[1]
  if !*optE {
	  name = strings.ReplaceAll(name, " ", "% %")
	  name = "%" + name + "%"
  }
#+end_src
#+begin_src latex
  We import \ty{util} and \ty{strings}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:tax}>>=
  "github.com/evolbioinf/neighbors/util"
  "strings"
#+end_src
#+begin_src latex
  If the user didn't provide a taxon and a database, we send a friendly
  message and quit.
#+end_src
#+begin_src go <<Check arguments, Pr. \ref{pr:tax}>>=
  m := "please provide a taxon and a database"
  if len(args) != 2 {
	  fmt.Fprintf(os.Stderr, "%s\n", m)
	  os.Exit(-1)
  }
#+end_src
#+begin_src latex
  We import \ty{fmt} and \ty{os}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:tax}>>=
  "fmt"
  "os"
#+end_src
#+begin_src latex
  We get the taxon-IDs through a method call on the taxonomy
  database. If we don't find any taxa, we're done.
#+end_src
#+begin_src go <<Get taxon-IDs, Pr. \ref{pr:tax}>>=
  taxdb := tdb.OpenTaxonomyDB(db)
  taxa, err := taxdb.Taxids(name, *optL, *optO)
  util.Check(err)
  if len(taxa) == 0 {
	  return
  }
#+end_src
#+begin_src latex
  We import \ty{tdb}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:tax}>>=
  "github.com/evolbioinf/neighbors/tdb"
#+end_src
#+begin_src latex
  Before we print the taxon-IDs, we sort them to ensure the output is
  reproducible. Then we print the taxon-IDs, the parents' IDs, and the
  corresponding names in a table. We layout the table using a
  \ty{tabwriter}.
#+end_src
#+begin_src go <<Print taxon-IDs, Pr. \ref{pr:tax}>>=
  sort.Ints(taxa)
  w := tabwriter.NewWriter(os.Stdout, 0, 1, 2, ' ', 0)
  defer w.Flush()
  fmt.Fprintf(w, "# ID\tParent\tName\n")
  for _, taxon := range taxa {
	  name, err := taxdb.Name(taxon)
	  util.Check(err)
	  p, err := taxdb.Parent(taxon)
	  util.Check(err)
	  fmt.Fprintf(w, "  %d\t%d\t%s\n", taxon, p, name)
  }
#+end_src
#+begin_src latex
  We import \ty{sort} and \ty{tabwriter}.
#+end_src
#+begin_src go <<Imports, Pr. \ref{pr:tax}>>=
  "sort"
  "text/tabwriter"
#+end_src
#+begin_src latex
  We're done writing \ty{taxi}, time to test it.

  \subsection*{Testing}
  Our testing code for \ty{taxi} contains hooks for imports and the
  testing logic.
#+end_src
#+begin_src go <<taxi_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Pr. \ref{pr:tax}>>
  )

  func TestTaxi(t *testing.T) {
	  //<<Testing, Pr. \ref{pr:tax}>>
  }
#+end_src
#+begin_src latex
  We construct the tests and iterate over them.
#+end_src
#+begin_src go <<Testing, Pr. \ref{pr:tax}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Pr. \ref{pr:tax}>>
  for i, test := range tests {
	  //<<Run test, Pr. \ref{pr:tax}>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Pr. \ref{pr:tax}>>=
  "os/exec"
#+end_src
#+begin_src latex
  Our query is \emph{Homo sapiens}, which we run in default mode and in
  exact mode. Remember that string matching in SQL databases is
  case-insensitive.
#+end_src
#+begin_src go <<Construct tests, Pr. \ref{pr:tax}>>=
  db := "../data/test.db"
  taxa := []string{"homo sapiens",
	  "haemophilus ducreyi",
	  "pseudomonas fluorescens ATCC 17400"}
  for _, taxon := range taxa {
	  test := exec.Command("./taxi", taxon, db)
	  tests = append(tests, test)
	  test = exec.Command("./taxi", "-e", taxon, db)
	  tests = append(tests, test)
  }
#+end_src
#+begin_src latex
  We execute the test and compare the result we get to the result we
  want. The results we want are contained in the files \ty{r1.txt}, 
  \ty{r2.txt} and so on.
#+end_src
#+begin_src go <<Run test, Pr. \ref{pr:tax}>>=
  get, err := test.Output()
  if err != nil { t.Error(err) }
  f := "r" + strconv.Itoa(i + 1) + ".txt"
  want, err := ioutil.ReadFile(f)
  if err != nil { t.Error(err) }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{strconv}, \ty{ioutil}, and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Pr. \ref{pr:tax}>>=
  "strconv"
  "io/ioutil"
  "bytes"
#+end_src

